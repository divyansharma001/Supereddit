This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/rules/ai-integration.mdc
.cursor/rules/authentication-flow.mdc
.cursor/rules/backend-ai-gemini.mdc
.cursor/rules/backend-development.mdc
.cursor/rules/bento-grid.mdc
.cursor/rules/frontend-development.mdc
.cursor/rules/mvp-features-context.mdc
.cursor/rules/plus-jakarta-sans-font.mdc
.cursor/rules/project-structure.mdc
client/.gitignore
client/biome.json
client/eslint.config.mjs
client/netlify.toml
client/next.config.js
client/package.json
client/postcss.config.mjs
client/public/ai-pattern.svg
client/README.md
client/src/app/ai/page.tsx
client/src/app/ClientBody.tsx
client/src/app/dashboard/page.tsx
client/src/app/globals.css
client/src/app/keywords/page.tsx
client/src/app/layout.tsx
client/src/app/login/page.tsx
client/src/app/Navbar.tsx
client/src/app/page.tsx
client/src/app/plus-jakarta-sans.css
client/src/app/posts/[id]/page.tsx
client/src/app/posts/new/page.tsx
client/src/app/posts/page.tsx
client/src/app/reddit-connect/page.tsx
client/src/app/register/page.tsx
client/src/app/socket-test/page.tsx
client/src/contexts/SocketContext.tsx
client/src/lib/auth.tsx
client/src/lib/axios.ts
client/src/lib/theme.tsx
client/src/lib/utils.ts
client/tailwind.config.ts
client/tsconfig.json
server/.env.example
server/.gitignore
server/API_DOCUMENTATION.md
server/package.json
server/PHASE2_MONITORING_PLAN.md
server/prisma/schema.prisma
server/README.md
server/src/controllers/ai.controller.ts
server/src/controllers/auth.controller.ts
server/src/controllers/keyword.controller.ts
server/src/controllers/mention.controller.ts
server/src/controllers/post.controller.ts
server/src/index.ts
server/src/middleware/auth.middleware.ts
server/src/routes/ai.routes.ts
server/src/routes/auth.routes.ts
server/src/routes/keyword.routes.ts
server/src/routes/mention.routes.ts
server/src/routes/post.routes.ts
server/src/routes/test.routes.ts
server/src/services/encryption.service.ts
server/src/services/monitoring.service.ts
server/src/services/scheduler.service.ts
server/src/utils/prisma.ts
server/tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/ai-integration.mdc">
# AI Integration & Post Generation

## AI Technology Stack
- **LangChain**: Framework for AI application development
- **Google Gemini**: Primary AI model (gemini-2.5-flash or gemini-pro)
- **Environment**: Requires `GEMINI_API_KEY` environment variable

## Implementation Details

### AI Controller
- [ai.controller.ts](mdc:server/src/controllers/ai.controller.ts) - Handles AI post generation
- [ai.routes.ts](mdc:server/src/routes/ai.routes.ts) - AI API endpoints

### Post Generation Process
1. **Input Validation**: Post body must be 100+ words and under 4000 characters
2. **AI Generation**: Uses LangChain with Gemini model
3. **Output Validation**: Generated content must be 50-4000 characters
4. **Error Handling**: Returns error if content is outside valid range

### API Endpoint
- `POST /api/ai/generate` - Generate Reddit post content
- **Request Body**: Should include topic, subreddit, tone, etc.
- **Response**: Generated post title and body

## Content Requirements
- **Minimum Length**: 100 words for generation prompt
- **Maximum Length**: 4000 characters for generated content
- **Validation**: Backend enforces 50-4000 character range
- **Error Response**: Returns error if content is outside valid range

## Integration Points
- **Post Creation**: AI-generated content can be saved as drafts
- **Scheduling**: Posts can be scheduled for automated posting
- **Status Tracking**: Posts have status (Draft, Scheduled, Posted, Error)

## Development Notes
- AI service is initialized with environment variable `GEMINI_API_KEY`
- Uses `gemini-2.5-flash` or `gemini-pro` model variants
- Content validation happens both at generation and storage levels
- Error handling includes specific validation error messages
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/authentication-flow.mdc">
# Authentication & OAuth Flow

## Current Implementation Status

### Reddit OAuth Flow
- **Issue**: OAuth callback flow is not fully functional
- **Problem**: Backend expects JWT token in `/api/auth/reddit/oauth/callback`, but Reddit redirects don't include it
- **Solution Needed**: Redirect to frontend first, capture the code, then call backend with JWT token in Authorization header

### Authentication Architecture
- **JWT Tokens**: Used for session management
- **Role-based Access**: ADMIN and CLIENT_USER roles
- **Multi-tenant**: Users belong to clients
- **Token Encryption**: Reddit OAuth tokens are encrypted before storage

## Key Files
- [auth.controller.ts](mdc:server/src/controllers/auth.controller.ts) - Authentication logic
- [auth.routes.ts](mdc:server/src/routes/auth.routes.ts) - Auth endpoints
- [auth.middleware.ts](mdc:server/src/middleware/auth.middleware.ts) - JWT verification
- [encryption.service.ts](mdc:server/src/services/encryption.service.ts) - Token encryption

## OAuth Flow Fix Required
1. Frontend should handle Reddit OAuth redirect
2. Capture authorization code from URL parameters
3. Send code to backend with JWT token in Authorization header
4. Backend exchanges code for access token
5. Store encrypted tokens in database

## Security Considerations
- OAuth tokens are encrypted using [encryption.service.ts](mdc:server/src/services/encryption.service.ts)
- JWT tokens have expiration
- Passwords are hashed with bcrypt
- CORS is configured for frontend origin

## Environment Variables
- `JWT_SECRET` - Required for JWT signing
- `REDDIT_CLIENT_ID` - Reddit OAuth app ID
- `REDDIT_CLIENT_SECRET` - Reddit OAuth app secret
- `REDDIT_REDIRECT_URI` - OAuth callback URL
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/backend-ai-gemini.mdc">
# Backend AI Integration Rule

- The AI endpoints in the backend use LangChain with Gemini (Google Generative AI) for generating Reddit post drafts.
- The Gemini model is initialized with the environment variable `GEMINI_API_KEY` and uses the `gemini-2.5-flash` or `gemini-pro` model.
- The prompt for post generation requires the body to be at least 100 words and under 4000 characters.
- The backend enforces a validation rule: generated post bodies must be between 50 and 4000 characters in length.
- If the generated body is outside this range, the API returns an error.
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/backend-development.mdc">
# Backend Development Standards

## Technology Stack
- **Framework**: Express.js with TypeScript
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: JWT tokens with bcrypt
- **AI Integration**: LangChain with Google Gemini
- **Scheduling**: node-cron for automated posting

## API Structure

### Controllers
- [auth.controller.ts](mdc:server/src/controllers/auth.controller.ts) - Authentication logic
- [post.controller.ts](mdc:server/src/controllers/post.controller.ts) - Post management
- [ai.controller.ts](mdc:server/src/controllers/ai.controller.ts) - AI post generation

### Routes
- [auth.routes.ts](mdc:server/src/routes/auth.routes.ts) - Auth endpoints
- [post.routes.ts](mdc:server/src/routes/post.routes.ts) - Post endpoints  
- [ai.routes.ts](mdc:server/src/routes/ai.routes.ts) - AI endpoints

### Services
- [scheduler.service.ts](mdc:server/src/services/scheduler.service.ts) - Automated posting
- [encryption.service.ts](mdc:server/src/services/encryption.service.ts) - Token encryption

## Database Schema
- **Client**: Multi-tenant architecture
- **User**: Role-based access (ADMIN, CLIENT_USER)
- **RedditAccount**: OAuth token storage (encrypted)
- **Post**: Status tracking (Draft, Scheduled, Posted, Error)

## API Endpoints

### Authentication
- `POST /api/auth/register` - User registration
- `POST /api/auth/login` - User login
- `POST /api/auth/reddit/oauth/callback` - Reddit OAuth callback

### Posts
- `GET /api/posts` - List posts
- `POST /api/posts` - Create post
- `PUT /api/posts/:id` - Update post
- `DELETE /api/posts/:id` - Delete post

### AI
- `POST /api/ai/generate` - Generate post content

## Development Workflow
- Run `npm run dev` for development with nodemon
- Use `npm run db:studio` to open Prisma Studio
- Use `npm run db:push` for schema changes
- Use `npm run db:migrate` for database migrations

## Environment Variables
- `DATABASE_URL` - PostgreSQL connection
- `JWT_SECRET` - JWT signing secret
- `GEMINI_API_KEY` - Google AI API key
- `FRONTEND_URL` - CORS origin (default: http://localhost:5173)

## Error Handling
- Global error handler in [index.ts](mdc:server/src/index.ts)
- Proper HTTP status codes
- Structured error responses
- Graceful shutdown handling
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/frontend-development.mdc">
# Frontend Development Standards

## Technology Stack
- **Framework**: Next.js 15 with App Router
- **Language**: TypeScript
- **Styling**: Tailwind CSS with custom design system
- **Icons**: Lucide React
- **Code Quality**: Biome for formatting, ESLint for linting

## Coding Standards

### TypeScript
- Use ES6+ syntax (arrow functions, const/let, destructuring)
- Prefer functional components with hooks
- Use proper TypeScript types and interfaces
- Import/export using ES6 module syntax

### Styling
- Use Tailwind CSS utility classes
- Leverage the custom design system in [tailwind.config.ts](mdc:client/tailwind.config.ts)
- Use `cn()` utility from [utils.ts](mdc:client/src/lib/utils.ts) for conditional classes
- Follow the design patterns from [page.tsx](mdc:client/src/app/page.tsx)

### Component Structure
- Use "use client" directive for client components
- Keep components focused and reusable
- Use proper TypeScript props interfaces
- Follow Next.js 13+ App Router conventions

### File Organization
- Components in `src/app/` for page components
- Utilities in `src/lib/` for shared functions
- Global styles in [globals.css](mdc:client/src/app/globals.css)

## Development Workflow
- Run `npm run dev` to start development server on port 5173
- Use `npm run lint` for code linting
- Use `npm run format` for code formatting with Biome
- Hot reload is enabled with Turbopack

## Key Dependencies
- Next.js 15.3.2
- React 18.3.1
- Tailwind CSS 3.4.17
- Lucide React for icons
- Class Variance Authority for component variants
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/mvp-features-context.mdc">
# Reddit MVP - Complete Feature Context

## Core MVP Features

### A. AI Reddit Post Writing
**Purpose**: Generate high-quality Reddit posts using AI
**Frontend Requirements**:
- **Post Creation Form**:
  - Keyword/topic input field
  - Tone selector (Story, Question, Experience)
  - Subreddit selection dropdown
  - Character count validation (50-4000 chars)
  - Preview mode for generated content
- **AI Generation Interface**:
  - "Generate Post" button with loading state
  - Real-time generation progress
  - Edit capabilities for generated content
  - Save as draft functionality
- **Content Management**:
  - Title and body pre-filled from AI
  - Rich text editor for manual edits
  - Character count display
  - Subreddit-specific formatting hints

### B. Smart Post Scheduler
**Purpose**: Schedule posts with calendar interface
**Frontend Requirements**:
- **Calendar Interface**:
  - Monthly/weekly view toggle
  - Drag-and-drop post scheduling
  - Time slot selection (hour/minute)
  - Subreddit-specific scheduling rules
- **Post Status Management**:
  - Visual status indicators (Draft, Scheduled, Posted)
  - Color-coded status system
  - Bulk status updates
  - Status change history
- **Scheduling Features**:
  - Recurring post options
  - Timezone handling
  - Conflict detection
  - Schedule preview

### C. Keyword Tracking
**Purpose**: Monitor Reddit for brand/competitor mentions
**Frontend Requirements**:
- **Keyword Management**:
  - Add/edit keyword lists
  - Category organization (Brand, Competitor, Trend)
  - Sentiment tagging (Positive, Neutral, Negative)
  - Keyword priority levels
- **Real-time Dashboard**:
  - Live mention feed
  - Push notification system
  - Mention count metrics
  - Sentiment distribution charts
- **Alert System**:
  - Customizable alert thresholds
  - Email/push notification settings
  - Alert history log
  - Mute/unmute functionality

### D. Upvote & Comment Coordination
**Purpose**: Coordinate engagement activities
**Frontend Requirements**:
- **Command Interface**:
  - Trigger buttons for upvote/comment actions
  - Target post selection
  - Action confirmation dialogs
  - Real-time status updates
- **Activity Tracking**:
  - Command execution logs
  - Success/failure indicators
  - Performance metrics
  - Activity timeline
- **Dashboard Features**:
  - Action summary statistics
  - Engagement rate tracking
  - Historical activity graphs
  - Export functionality

### E. Client Dashboard
**Purpose**: Secure client access with analytics
**Frontend Requirements**:
- **Authentication**:
  - Client login system
  - Role-based access (ADMIN, CLIENT_USER)
  - Session management
  - Password reset functionality
- **Visual Calendar**:
  - Interactive calendar view
  - Post timeline visualization
  - Upcoming/past post indicators
  - Click-to-edit functionality
- **Analytics Dashboard**:
  - Post performance metrics
  - Engagement tracking
  - Keyword mention summaries
  - Read-only data presentation
- **Comment Management**:
  - Comment visibility toggles
  - Comment moderation tools
  - Comment analytics
  - Response tracking

### F. Reporting & Analytics
**Purpose**: Comprehensive performance reporting
**Frontend Requirements**:
- **Performance Metrics**:
  - Post views and upvotes
  - Click-through rates (CTR)
  - Engagement graphs
  - Comparative analytics
- **Comment Analytics**:
  - Comments per post tracking
  - Engagement depth analysis
  - Comment sentiment tracking
  - Response rate metrics
- **Keyword Reports**:
  - Trigger log visualization
  - Mention frequency charts
  - Sentiment analysis graphs
  - Trend identification
- **Export Features**:
  - PDF report generation
  - Custom date range selection
  - Client-specific reports
  - Automated report scheduling

## Technical Implementation

### Frontend Architecture
- **Framework**: Next.js 15 with App Router
- **Styling**: Tailwind CSS with custom design system
- **State Management**: React hooks and context
- **API Integration**: RESTful API calls to backend
- **Real-time**: WebSocket connections for live updates

### Key Frontend Components Needed
1. **Dashboard Layout**: Main client dashboard with navigation
2. **Post Creator**: AI-powered post generation interface
3. **Calendar Scheduler**: Interactive calendar for post scheduling
4. **Keyword Tracker**: Real-time keyword monitoring interface
5. **Analytics Charts**: Performance visualization components
6. **Activity Logger**: Command and action tracking interface
7. **Report Generator**: PDF export functionality
8. **Notification System**: Real-time alerts and notifications

### API Integration Points
- **Authentication**: JWT-based auth with role management
- **Post Management**: CRUD operations for posts
- **AI Generation**: LangChain/Gemini integration
- **Scheduling**: Automated post scheduling system
- **Keyword Monitoring**: Real-time mention tracking
- **Analytics**: Performance data aggregation
- **Reporting**: PDF generation and export

### Database Schema Integration
- **Client**: Multi-tenant client management
- **User**: Role-based user accounts
- **RedditAccount**: OAuth token management
- **Post**: Post content and scheduling
- **Keyword**: Monitoring configuration
- **Activity**: Command and action logs
- **Analytics**: Performance metrics storage

### Security & Performance
- **Authentication**: Secure JWT implementation
- **Data Encryption**: OAuth token encryption
- **CORS**: Proper frontend-backend communication
- **Rate Limiting**: API protection
- **Caching**: Performance optimization
- **Real-time Updates**: WebSocket connections

## Development Priorities
1. **Core Authentication**: Client login and role management
2. **Post Creation**: AI-powered post generation
3. **Scheduling System**: Calendar interface and automation
4. **Dashboard**: Main client interface
5. **Analytics**: Performance tracking and reporting
6. **Keyword Monitoring**: Real-time mention tracking
7. **Engagement Tools**: Upvote/comment coordination
8. **Reporting**: PDF export and analytics

## Environment Configuration
- **Frontend Port**: 5173 (configured)
- **Backend Port**: 3000
- **Database**: PostgreSQL with Prisma
- **AI Service**: Google Gemini via LangChain
- **OAuth**: Reddit API integration
- **File Storage**: For PDF reports and exports
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/plus-jakarta-sans-font.mdc">
# Font Usage Rule

Always use 'Plus Jakarta Sans' as the primary font for all UI components and pages. The font is imported in [globals.css](mdc:client/src/app/globals.css) and should be referenced in all custom styles and inline style overrides as needed.

Example usage:
```css
font-family: 'Plus Jakarta Sans', ui-sans-serif, system-ui, ...;
```

If you need to add or override font styles in components, ensure 'Plus Jakarta Sans' is used for consistency and a modern look.
description:
globs:
alwaysApply: false
---
</file>

<file path=".cursor/rules/project-structure.mdc">
# Reddit MVP Project Structure

This is a full-stack Reddit automation MVP with AI-powered post generation.

## Project Architecture

### Frontend (Next.js + TypeScript + Tailwind)
- **Location**: `client/` directory
- **Framework**: Next.js 15 with App Router
- **Styling**: Tailwind CSS with custom design system
- **Port**: Runs on port 5173 (configured in [package.json](mdc:client/package.json))
- **Key Files**:
  - [src/app/page.tsx](mdc:client/src/app/page.tsx) - Main landing page
  - [src/app/layout.tsx](mdc:client/src/app/layout.tsx) - Root layout
  - [src/lib/utils.ts](mdc:client/src/lib/utils.ts) - Utility functions

### Backend (Express + TypeScript + Prisma)
- **Location**: `server/` directory  
- **Framework**: Express.js with TypeScript
- **Database**: PostgreSQL with Prisma ORM
- **Port**: Runs on port 3000 by default
- **Key Files**:
  - [src/index.ts](mdc:server/src/index.ts) - Server entry point
  - [prisma/schema.prisma](mdc:server/prisma/schema.prisma) - Database schema
  - [src/controllers/](mdc:server/src/controllers/) - API controllers
  - [src/routes/](mdc:server/src/routes/) - API routes
  - [src/services/](mdc:server/src/services/) - Business logic

## Database Models
- **Client**: Multi-tenant client management
- **User**: User accounts with roles (ADMIN, CLIENT_USER)
- **RedditAccount**: OAuth tokens for Reddit API access
- **Post**: Reddit posts with status tracking (Draft, Scheduled, Posted, Error)

## API Endpoints
- `/api/auth` - Authentication routes
- `/api/posts` - Post management
- `/api/ai` - AI-powered post generation

## Development Commands
- Frontend: `cd client && npm run dev`
- Backend: `cd server && npm run dev`
- Database: `cd server && npm run db:studio`
description:
globs:
alwaysApply: false
---
</file>

<file path="client/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="client/biome.json">
{
  "$schema": "https://biomejs.dev/schemas/1.9.4/schema.json",
  "vcs": {
    "enabled": false,
    "clientKind": "git",
    "useIgnoreFile": false
  },
  "files": {
    "ignoreUnknown": false,
    "ignore": ["dist", ".next", "node_modules", "build", "src/generated/**"],
    "include": ["src/**/*.ts", "src/**/*.tsx"]
  },
  "formatter": {
    "enabled": true,
    "indentStyle": "space"
  },
  "organizeImports": {
    "enabled": true
  },
  "linter": {
    "enabled": true,
    "rules": {
      "recommended": true,
      "correctness": {
        "noUnusedVariables": "off"
      },
      "nursery": {
        "noImgElement": "off"
      },
      "a11y": {
        "noAutofocus": "off",
        "noDistractingElements": "off",
        "noHeaderScope": "off",
        "noInteractiveElementToNoninteractiveRole": "off",
        "noLabelWithoutControl": "off",
        "noNoninteractiveElementToInteractiveRole": "off",
        "noNoninteractiveTabindex": "off",
        "noPositiveTabindex": "off",
        "noRedundantAlt": "off",
        "noRedundantRoles": "off",
        "noSvgWithoutTitle": "off",
        "useAltText": "off",
        "useKeyWithClickEvents": "off",
        "useKeyWithMouseEvents": "off",
        "useButtonType": "off"
      }
    }
  },
  "javascript": {
    "formatter": {
      "quoteStyle": "double"
    }
  }
}
</file>

<file path="client/eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    languageOptions: {
      parserOptions: {
        warnOnUnsupportedTypeScriptVersion: false,
      },
    },
    rules: {
      "@typescript-eslint/no-unused-vars": "off",
      "react/no-unescaped-entities": "off",
      "@next/next/no-img-element": "off",
      "jsx-a11y/alt-text": "off",
    },
  },
];

export default eslintConfig;
</file>

<file path="client/netlify.toml">
[images]
  remote_images = ["https://source.unsplash.com/.*", "https://images.unsplash.com/.*", "https://ext.same-assets.com/.*", "https://ugc.same-assets.com/.*"]

[build]
  command = "bun run build"
  publish = ".next"

[build.environment]
  NETLIFY_NEXT_PLUGIN_SKIP = "true"

[[plugins]]
  package = "@netlify/plugin-nextjs"
</file>

<file path="client/next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  allowedDevOrigins: ["*.preview.same-app.com"],
  images: {
    unoptimized: true,
    domains: [
      "source.unsplash.com",
      "images.unsplash.com",
      "ext.same-assets.com",
      "ugc.same-assets.com",
    ],
    remotePatterns: [
      {
        protocol: "https",
        hostname: "source.unsplash.com",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "images.unsplash.com",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "ext.same-assets.com",
        pathname: "/**",
      },
      {
        protocol: "https",
        hostname: "ugc.same-assets.com",
        pathname: "/**",
      },
    ],
  },
};

module.exports = nextConfig;
</file>

<file path="client/postcss.config.mjs">
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;
</file>

<file path="client/public/ai-pattern.svg">
<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <pattern id="ai-pattern" patternUnits="userSpaceOnUse" width="100" height="100">
      <circle cx="10" cy="10" r="1.5" fill="#fff" />
      <circle cx="30" cy="10" r="1.5" fill="#fff" />
      <circle cx="50" cy="10" r="1.5" fill="#fff" />
      <circle cx="70" cy="10" r="1.5" fill="#fff" />
      <circle cx="90" cy="10" r="1.5" fill="#fff" />
      
      <circle cx="20" cy="20" r="1.5" fill="#fff" />
      <circle cx="40" cy="20" r="1.5" fill="#fff" />
      <circle cx="60" cy="20" r="1.5" fill="#fff" />
      <circle cx="80" cy="20" r="1.5" fill="#fff" />
      
      <circle cx="10" cy="30" r="1.5" fill="#fff" />
      <circle cx="30" cy="30" r="1.5" fill="#fff" />
      <circle cx="50" cy="30" r="1.5" fill="#fff" />
      <circle cx="70" cy="30" r="1.5" fill="#fff" />
      <circle cx="90" cy="30" r="1.5" fill="#fff" />
      
      <circle cx="20" cy="40" r="1.5" fill="#fff" />
      <circle cx="40" cy="40" r="1.5" fill="#fff" />
      <circle cx="60" cy="40" r="1.5" fill="#fff" />
      <circle cx="80" cy="40" r="1.5" fill="#fff" />
      
      <circle cx="10" cy="50" r="1.5" fill="#fff" />
      <circle cx="30" cy="50" r="1.5" fill="#fff" />
      <circle cx="50" cy="50" r="1.5" fill="#fff" />
      <circle cx="70" cy="50" r="1.5" fill="#fff" />
      <circle cx="90" cy="50" r="1.5" fill="#fff" />
      
      <circle cx="20" cy="60" r="1.5" fill="#fff" />
      <circle cx="40" cy="60" r="1.5" fill="#fff" />
      <circle cx="60" cy="60" r="1.5" fill="#fff" />
      <circle cx="80" cy="60" r="1.5" fill="#fff" />
      
      <circle cx="10" cy="70" r="1.5" fill="#fff" />
      <circle cx="30" cy="70" r="1.5" fill="#fff" />
      <circle cx="50" cy="70" r="1.5" fill="#fff" />
      <circle cx="70" cy="70" r="1.5" fill="#fff" />
      <circle cx="90" cy="70" r="1.5" fill="#fff" />
      
      <circle cx="20" cy="80" r="1.5" fill="#fff" />
      <circle cx="40" cy="80" r="1.5" fill="#fff" />
      <circle cx="60" cy="80" r="1.5" fill="#fff" />
      <circle cx="80" cy="80" r="1.5" fill="#fff" />
      
      <circle cx="10" cy="90" r="1.5" fill="#fff" />
      <circle cx="30" cy="90" r="1.5" fill="#fff" />
      <circle cx="50" cy="90" r="1.5" fill="#fff" />
      <circle cx="70" cy="90" r="1.5" fill="#fff" />
      <circle cx="90" cy="90" r="1.5" fill="#fff" />
      
      <!-- Neural network lines -->
      <line x1="30" y1="30" x2="50" y2="50" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      <line x1="50" y1="50" x2="70" y2="30" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      <line x1="30" y1="70" x2="50" y2="50" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      <line x1="50" y1="50" x2="70" y2="70" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      
      <line x1="10" y1="50" x2="30" y2="30" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      <line x1="70" y1="30" x2="90" y2="50" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      <line x1="10" y1="50" x2="30" y2="70" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
      <line x1="70" y1="70" x2="90" y2="50" stroke="#fff" stroke-width="0.5" stroke-opacity="0.3" />
    </pattern>
  </defs>
  <rect width="100" height="100" fill="url(#ai-pattern)" />
</svg>
</file>

<file path="client/README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="client/src/app/plus-jakarta-sans.css">
@font-face {
  font-family: 'Plus Jakarta Sans';
  font-style: normal;
  font-weight: 400;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/plusjakartasans/v11/LDIbaomQNQcsA88c7O9yZ4KMCoOg4IA6-91aHEjcWuA_qU7NSg.ttf) format('truetype');
}
@font-face {
  font-family: 'Plus Jakarta Sans';
  font-style: normal;
  font-weight: 500;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/plusjakartasans/v11/LDIbaomQNQcsA88c7O9yZ4KMCoOg4IA6-91aHEjcWuA_m07NSg.ttf) format('truetype');
}
@font-face {
  font-family: 'Plus Jakarta Sans';
  font-style: normal;
  font-weight: 700;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/plusjakartasans/v11/LDIbaomQNQcsA88c7O9yZ4KMCoOg4IA6-91aHEjcWuA_TknNSg.ttf) format('truetype');
}
@font-face {
  font-family: 'Plus Jakarta Sans';
  font-style: normal;
  font-weight: 800;
  font-display: swap;
  src: url(https://fonts.gstatic.com/s/plusjakartasans/v11/LDIbaomQNQcsA88c7O9yZ4KMCoOg4IA6-91aHEjcWuA_KUnNSg.ttf) format('truetype');
}
</file>

<file path="client/src/contexts/SocketContext.tsx">
// client/src/contexts/SocketContext.tsx

'use client';

import React, { createContext, useContext, useEffect, useRef, useState } from 'react';
import { io, Socket } from 'socket.io-client';
import { useAuth } from '@/lib/auth';

interface Mention {
  id: string;
  source_url: string;
  content_snippet: string;
  author: string;
  subreddit: string;
  sentiment: 'POSITIVE' | 'NEUTRAL' | 'NEGATIVE' | 'UNKNOWN';
  found_at: string;
  keywordId: string;
  clientId: string;
}

interface SocketContextValue {
  socket: Socket | null;
  lastMention: Mention | null;
}

const SocketContext = createContext<SocketContextValue>({ socket: null, lastMention: null });

export const SocketProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useAuth(); // Use the auth context to know when to connect
  const [lastMention, setLastMention] = useState<Mention | null>(null);
  const socketRef = useRef<Socket | null>(null);

  useEffect(() => {
    // Only attempt to connect if there is a logged-in user
    if (!user) {
      if (socketRef.current) {
        socketRef.current.disconnect();
        socketRef.current = null;
      }
      return;
    }
    
    // Prevent reconnecting if already connected
    if (socketRef.current) return;

    const token = localStorage.getItem('token');
    if (!token) return;

    const socketInstance = io(process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001', {
      auth: { token },
      transports: ['websocket'],
    });
    socketRef.current = socketInstance;

    socketInstance.on('connect', () => {
      console.log('Socket connected');
    });
    socketInstance.on('new_mention', (mention: Mention) => {
      setLastMention(mention);
    });
    socketInstance.on('disconnect', () => {
      console.log('Socket disconnected');
    });
    
    return () => {
      if (socketInstance) {
        socketInstance.disconnect();
        socketRef.current = null;
      }
    };
  }, [user]); // The dependency on `user` is key

  return (
    <SocketContext.Provider value={{ socket: socketRef.current, lastMention }}>
      {children}
    </SocketContext.Provider>
  );
};

export const useSocketContext = () => useContext(SocketContext);
</file>

<file path="client/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path="client/tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      container: {
      center: true,
      padding: {
        DEFAULT: '1rem',
        sm: '2rem',
        lg: '4rem',
        xl: '5rem',
        '2xl': '6rem',
      },
      screens: {
        sm: '640px',
        md: '768px',
        lg: '1024px',
        xl: '1280px',
        '2xl': '1536px',
      },
      },
    }
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="client/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "jsxImportSource": "same-runtime/dist",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "next-env.d.ts",
    "build/types/**/*.ts"
  ],
  "exclude": ["node_modules"]
}
</file>

<file path="server/.env.example">
# Server Configuration
PORT=3001
NODE_ENV=development
FRONTEND_URL=http://localhost:3000

# Database
DATABASE_URL="postgresql://username:password@localhost:5432/reddit_mvp?schema=public"

# JWT Secret (generate with: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))")
JWT_SECRET=your_jwt_secret_here_make_it_long_and_random

# Encryption (generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))")
ENCRYPTION_KEY=your_32_byte_encryption_key_here_as_hex_string
ENCRYPTION_IV=your_16_byte_encryption_iv_here_as_hex_string

# Reddit OAuth
REDDIT_CLIENT_ID=your_reddit_client_id
REDDIT_CLIENT_SECRET=your_reddit_client_secret
REDDIT_REDIRECT_URI=http://localhost:3001/api/auth/reddit/oauth/callback

# OpenAI API
OPENAI_API_KEY=your_openai_api_key_here
</file>

<file path="server/.gitignore">
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# TypeScript
*.tsbuildinfo

# Build output
dist/
build/

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# Prisma
prisma/migrations/
.env

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
</file>

<file path="server/PHASE2_MONITORING_PLAN.md">
# Phase 2: Monitoring & Analytics Module – Project Plan

## Persona
You are a Senior Full-Stack Engineer with deep expertise in real-time data processing, external API integration, and building scalable SaaS features. You are tasked with extending an existing Reddit management application with a sophisticated monitoring and analytics module. Your code must be efficient, secure, and production-ready.

## Project Goal
Evolve the application from a simple content publisher into a proactive market intelligence platform. You will build a complete, end-to-end system that allows clients to track keywords across Reddit, receive real-time alerts for new mentions, and automatically analyze the sentiment of those conversations.

---

## Part A: The Backend (Node.js, Express, TypeScript, Prisma)

### Step 1: Database Schema Expansion (`prisma/schema.prisma`)
- **Define Enums:**
  - `Sentiment` enum: POSITIVE, NEUTRAL, NEGATIVE, UNKNOWN
- **Create Models:**
  - **Keyword Model:**
    - Fields: id, term, is_active, createdAt, lastScannedAt, clientId (FK), mentions (relation)
    - Constraints: `@@unique([term, clientId])`
  - **Mention Model:**
    - Fields: id, source_url (unique), content_snippet (@db.Text), author, subreddit, sentiment, found_at, keywordId (FK), clientId (FK)
    - Relations: keyword (onDelete: Cascade), client (onDelete: Cascade)
- **After modifying, run:**
  - `npx prisma migrate dev --name add_monitoring_engine`

### Step 2: Keyword & Mention Management APIs
- **File Locations:**
  - `src/controllers/keyword.controller.ts`, `src/routes/keyword.routes.ts`, etc.
- **Authentication:**
  - All endpoints protected by `auth.middleware`.
- **Endpoints:**
  - `POST /api/keywords`: Create new keyword for authenticated client
  - `GET /api/keywords`: List all keywords for client
  - `DELETE /api/keywords/:id`: Delete keyword (ownership enforced)
  - `GET /api/mentions`: Paginated list of mentions for client, ordered by `found_at` desc

### Step 3: The Reddit Monitoring Service (`src/services/monitoring.service.ts`)
- **Scheduler Setup:**
  - Use `node-cron` to run every 2 minutes (`'*/2 * * * *'`)
  - Locking mechanism to prevent overlapping runs
- **Reddit API Authentication:**
  - Use app-only OAuth2 (client_credentials grant)
  - Store token and expiry
- **Core Scanning Logic:**
  - Fetch active keywords
  - For each keyword:
    - Delay between requests (e.g., 1100ms)
    - Use `lastScannedAt` or default (24h ago)
    - Query Reddit: `q=timestamp:${lastScannedAt}..${now} "${keyword.term}"`
    - GET `https://oauth.reddit.com/search.json?sort=new&limit=100&q=...`
    - For each result:
      - Extract permalink, author, subreddit, title, selftext/body
      - Deduplicate by permalink
      - Sentiment analysis (map score to enum)
      - Insert Mention in DB
      - Emit real-time alert via socket.io to client room
    - Update keyword's `lastScannedAt`

### Step 4: WebSocket Server Integration (`src/index.ts`)
- **Setup socket.io** and attach to HTTP server
- **Connection Authentication:**
  - Middleware: verify JWT in handshake
  - On success: join room named after clientId

---

## Part B: The Frontend (React, TypeScript, Vite)

### Step 1: Context for WebSocket Management (`src/contexts/SocketContext.tsx`)
- Create `SocketProvider` to wrap app
- `useEffect`:
  - If authenticated, connect socket.io-client with JWT
  - Listen for `new_mention` event
  - Update context state or notify via callback
  - Cleanup: `socket.disconnect()`

### Step 2: New Pages and Routing
- Create `MonitoringPage.tsx` (central hub)
- Fetch initial keywords and mentions
- Update `App.tsx` and `Navbar.tsx` for new route/link

### Step 3: Build the UI Components
- **KeywordManager.tsx:**
  - Props: keywords, onAddKeyword, onDeleteKeyword
  - UI: MUI TextField + Add Button, List of keywords, Delete button
- **MentionsFeed.tsx:**
  - Props: mentions
  - State: updates on new mentions via SocketContext
  - UI: MUI Card per mention
    - MUI Chip for sentiment (color-coded)
    - Content snippet
    - Metadata (subreddit, author, relative time)
    - "View on Reddit" link

---

By following this plan, you will create a highly valuable and technically impressive feature that functions as a cohesive, end-to-end system.
</file>

<file path="server/README.md">
# Reddit Post Management SaaS - Backend

A robust, scalable backend for managing Reddit posts with AI-assisted content generation, secure token storage, and automated scheduling.

## 🚀 Features

- **User Authentication**: JWT-based authentication with bcrypt password hashing
- **Client Management**: Multi-tenant architecture with client isolation
- **Reddit OAuth Integration**: Secure connection to Reddit accounts with encrypted token storage
- **AI-Powered Content Generation**: OpenAI integration for creating engaging Reddit posts
- **Post Scheduling**: Automated posting with token refresh and error handling
- **RESTful API**: Clean, well-documented endpoints with proper error handling

## 🛠 Tech Stack

- **Runtime**: Node.js with TypeScript
- **Framework**: Express.js
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: JWT with bcryptjs
- **Encryption**: Node.js crypto module (AES-256-CBC)
- **AI Integration**: OpenAI API
- **Scheduling**: node-cron
- **HTTP Client**: axios

## 📁 Project Structure

```
server/
├── prisma/
│   └── schema.prisma          # Database schema
├── src/
│   ├── controllers/
│   │   ├── auth.controller.ts     # Authentication logic
│   │   ├── post.controller.ts     # Post management
│   │   └── ai.controller.ts       # AI content generation
│   ├── routes/
│   │   ├── auth.routes.ts         # Auth endpoints
│   │   ├── post.routes.ts         # Post endpoints
│   │   └── ai.routes.ts           # AI endpoints
│   ├── services/
│   │   ├── encryption.service.ts  # Token encryption
│   │   └── scheduler.service.ts   # Post scheduling
│   ├── middleware/
│   │   └── auth.middleware.ts     # JWT authentication
│   ├── utils/
│   │   └── prisma.ts             # Database client
│   └── index.ts                   # Main server file
├── .env.example                  # Environment variables template
├── package.json                  # Dependencies and scripts
└── tsconfig.json                 # TypeScript configuration
```

## 🚀 Quick Start

### 1. Prerequisites

- Node.js 18+ 
- PostgreSQL database
- Reddit Developer Account
- OpenAI API Key

### 2. Installation

```bash
# Install dependencies
npm install

# Copy environment variables
cp .env.example .env

# Generate Prisma client
npm run db:generate
```

### 3. Environment Setup

Edit `.env` file with your configuration:

```bash
# Generate secure keys
node -e "console.log('JWT_SECRET:', require('crypto').randomBytes(64).toString('hex'))"
node -e "console.log('ENCRYPTION_KEY:', require('crypto').randomBytes(32).toString('hex'))"
node -e "console.log('ENCRYPTION_IV:', require('crypto').randomBytes(16).toString('hex'))"
```

### 4. Database Setup

```bash
# Push schema to database
npm run db:push

# Or run migrations
npm run db:migrate
```

### 5. Start Development Server

```bash
npm run dev
```

Server will start on `http://localhost:3000`

## 📚 API Documentation

### Authentication Endpoints

#### POST `/api/auth/register`
Register a new user and client.

**Request Body:**
```json
{
  "email": "user@example.com",
  "password": "securepassword",
  "clientName": "My Company"
}
```

#### POST `/api/auth/login`
Login user and get JWT token.

**Request Body:**
```json
{
  "email": "user@example.com",
  "password": "securepassword"
}
```

#### POST `/api/auth/reddit/oauth/connect`
Get Reddit OAuth URL (requires authentication).

#### GET `/api/auth/reddit/oauth/callback`
Handle Reddit OAuth callback (requires authentication).

### Post Management Endpoints

All post endpoints require authentication via `Authorization: Bearer <token>` header.

#### POST `/api/posts`
Create a new post.

**Request Body:**
```json
{
  "title": "My Reddit Post",
  "body": "Post content here...",
  "subreddit": "programming",
  "scheduled_at": "2024-01-15T10:00:00Z" // Optional
}
```

#### GET `/api/posts`
Get all posts with pagination.

**Query Parameters:**
- `page`: Page number (default: 1)
- `limit`: Items per page (default: 10)
- `status`: Filter by status (Draft, Scheduled, Posted, Error)

#### GET `/api/posts/:id`
Get a specific post.

#### PUT `/api/posts/:id`
Update a post.

#### DELETE `/api/posts/:id`
Delete a post.

#### POST `/api/posts/:id/schedule`
Schedule a post for posting.

**Request Body:**
```json
{
  "scheduled_at": "2024-01-15T10:00:00Z",
  "redditAccountId": "account_id" // Optional
}
```

### AI Endpoints

#### POST `/api/ai/draft`
Generate AI-powered post content.

**Request Body:**
```json
{
  "keywords": "programming tips",
  "tone": "story" // "story", "question", or "experience"
}
```

#### GET `/api/ai/tones`
Get available AI generation tones.

## 🔐 Security Features

- **Password Hashing**: bcryptjs with 12 salt rounds
- **JWT Authentication**: Secure token-based authentication
- **Token Encryption**: AES-256-CBC encryption for Reddit tokens
- **Input Validation**: Comprehensive request validation
- **CORS Protection**: Configured for frontend security
- **Rate Limiting**: Built-in Express rate limiting

## 🤖 AI Integration

The AI service uses OpenAI's GPT-3.5-turbo model to generate engaging Reddit posts based on:

- **Keywords**: User-provided topics
- **Tone**: story, question, or experience
- **Content Guidelines**: Reddit-appropriate content with proper length limits

## ⏰ Automated Scheduling

The scheduler service runs every minute to:

1. Find scheduled posts due for posting
2. Refresh expired Reddit tokens
3. Submit posts to Reddit API
4. Update post status and track errors

## 🗄 Database Schema

### Core Models

- **Client**: Multi-tenant client organizations
- **User**: Authenticated users with roles
- **RedditAccount**: Encrypted Reddit OAuth tokens
- **Post**: Reddit posts with scheduling and status tracking

### Key Features

- **Multi-tenancy**: Client-based data isolation
- **Audit Trail**: Created/updated timestamps
- **Status Tracking**: Draft → Scheduled → Posted/Error
- **Error Handling**: Detailed error messages for failed posts

## 🚀 Deployment

### Production Setup

1. **Environment Variables**: Configure all required environment variables
2. **Database**: Set up PostgreSQL with proper connection string
3. **Build**: `npm run build`
4. **Start**: `npm start`

### Docker Support

```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm ci --only=production
COPY . .
RUN npm run build
EXPOSE 3001
CMD ["npm", "start"]
```

## 🔧 Development

### Available Scripts

- `npm run dev`: Start development server with hot reload
- `npm run build`: Build TypeScript to JavaScript
- `npm run start`: Start production server
- `npm run db:generate`: Generate Prisma client
- `npm run db:push`: Push schema to database
- `npm run db:migrate`: Run database migrations
- `npm run db:studio`: Open Prisma Studio

### Code Quality

- **TypeScript**: Strict type checking
- **ESLint**: Code linting (configure as needed)
- **JSDoc**: Comprehensive documentation
- **Error Handling**: Proper error responses

## 📝 Environment Variables

| Variable | Description | Required |
|----------|-------------|----------|
| `PORT` | Server port | No (default: 3000) |
| `NODE_ENV` | Environment | No (default: development) |
| `DATABASE_URL` | PostgreSQL connection | Yes |
| `JWT_SECRET` | JWT signing secret | Yes |
| `ENCRYPTION_KEY` | AES encryption key | Yes |
| `ENCRYPTION_IV` | AES initialization vector | Yes |
| `REDDIT_CLIENT_ID` | Reddit OAuth client ID | Yes |
| `REDDIT_CLIENT_SECRET` | Reddit OAuth secret | Yes |
| `REDDIT_REDIRECT_URI` | OAuth callback URL | Yes |
| `OPENAI_API_KEY` | OpenAI API key | Yes |

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## 📄 License

This project is licensed under the MIT License.
</file>

<file path="server/src/controllers/ai.controller.ts">
import { Request, Response } from 'express';
import { ChatGoogleGenerativeAI } from '@langchain/google-genai';
import { ChatPromptTemplate } from '@langchain/core/prompts';
import { RunnableSequence } from '@langchain/core/runnables';

/**
 * Controller for AI-related endpoints (now using LangChain + Gemini)
 */
export class AIController {
  private static gemini: ChatGoogleGenerativeAI;

  /**
   * Initialize Gemini client
   */
  static initializeGemini(): void {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY is required');
    }
    AIController.gemini = new ChatGoogleGenerativeAI({ apiKey, model: 'gemini-2.5-flash' });
  }

  /**
   * Generate a Reddit post draft using Gemini via LangChain
   */
  static async generateDraft(req: Request, res: Response): Promise<void> {
    try {
      const { keywords, tone } = req.body;

      // Validate input
      if (!keywords || !tone) {
        res.status(400).json({ error: 'Keywords and tone are required' });
        return;
      }

      const validTones = ['story', 'question', 'experience'];
      if (!validTones.includes(tone)) {
        res.status(400).json({ error: 'Tone must be one of: story, question, experience' });
        return;
      }

      if (!AIController.gemini) {
        AIController.initializeGemini();
      }

      // Construct prompt based on tone
      let prompt: string;
      switch (tone) {
        case 'story':
          prompt = `Generate a Reddit post about "${keywords}". Write it as a personal story or anecdote. The post should be engaging, relatable, and encourage discussion. Format the response as JSON with "title" and "body" fields. Keep the title under 300 characters and the body between 200-2000 characters. The body should be at least 100 words.`;
          break;
        case 'question':
          prompt = `Generate a Reddit post about "${keywords}". Write it as an engaging question that encourages community discussion. The post should be thought-provoking and invite responses. Format the response as JSON with "title" and "body" fields. Keep the title under 300 characters and the body between 200-2000 characters. The body should be at least 100 words.`;
          break;
        case 'experience':
          prompt = `Generate a Reddit post about "${keywords}". Write it as a personal experience or observation that others can relate to. The post should be authentic and encourage sharing of similar experiences. Format the response as JSON with "title" and "body" fields. Keep the title under 300 characters and the body between 200-2000 characters. The body should be at least 100 words.`;
          break;
        default:
          prompt = `Generate a Reddit post about "${keywords}". Write it in a conversational tone that encourages engagement. Format the response as JSON with "title" and "body" fields. Keep the title under 300 characters and the body between 200-2000 characters. The body should be at least 100 words.`;
      }

      // Use LangChain's prompt template and Gemini LLM
      const chatPrompt = ChatPromptTemplate.fromMessages([
        [
          'system',
          'You are a helpful assistant that generates Reddit posts. Always respond with valid JSON containing "title" and "body" fields. Make the content engaging and appropriate for Reddit communities.'
        ],
        ['user', prompt]
      ]);

      const chain = RunnableSequence.from([
        chatPrompt,
        AIController.gemini
      ]);

      const response = await chain.invoke({});
      let responseText = '';
      if (typeof response === 'string') {
        responseText = response;
      } else if (Array.isArray(response) && response.length > 0 && typeof response[0].text === 'string') {
        responseText = response[0].text;
      } else if (response?.content && typeof response.content === 'string') {
        responseText = response.content;
      }

      // Parse JSON response
      let parsedResponse;
      try {
        // Extract JSON from the response (in case there's extra text)
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
          throw new Error('No JSON found in response');
        }
        parsedResponse = JSON.parse(jsonMatch[0]);
      } catch (error) {
        console.error('Failed to parse Gemini response:', error);
        res.status(500).json({ error: 'Failed to parse Gemini response' });
        return;
      }

      // Validate response structure
      if (!parsedResponse.title || !parsedResponse.body) {
        res.status(500).json({ error: 'Invalid response structure from Gemini' });
        return;
      }

      // Clean and validate content
      const title = parsedResponse.title.trim();
      const body = parsedResponse.body.trim();

      // Log the generated body for debugging
      console.log('Generated body:', body, 'Length:', body.length);

      if (title.length > 300) {
        res.status(500).json({ error: 'Generated title is too long' });
        return;
      }

      if (body.length < 50 || body.length > 4000) {
        res.status(500).json({ error: 'Generated body is not within acceptable length' });
        return;
      }

      res.json({
        title,
        body,
        keywords,
        tone
      });
    } catch (error) {
      console.error('Gemini draft generation error:', error);
      res.status(500).json({ error: 'Failed to generate draft with Gemini' });
    }
  }

  /**
   * Get available tones for AI generation
   */
  static async getTones(req: Request, res: Response): Promise<void> {
    try {
      const tones = [
        {
          value: 'story',
          label: 'Personal Story',
          description: 'Share a personal anecdote or experience'
        },
        {
          value: 'question',
          label: 'Discussion Question',
          description: 'Ask an engaging question to the community'
        },
        {
          value: 'experience',
          label: 'Experience Share',
          description: 'Share an observation or experience for others to relate to'
        }
      ];

      res.json({ tones });
    } catch (error) {
      console.error('Get tones error:', error);
      res.status(500).json({ error: 'Failed to fetch tones' });
    }
  }
}
</file>

<file path="server/src/controllers/keyword.controller.ts">
import { Request, Response } from 'express';
import { prisma } from '../utils/prisma';

// POST /api/keywords
export const createKeyword = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'Unauthorized' });
      return;
    }
    const { term } = req.body;
    const clientId = req.user.clientId;
    if (!term) {
      res.status(400).json({ error: 'Keyword term is required' });
      return;
    }
    const keyword = await prisma.keyword.create({
      data: { term, clientId },
    });
    res.status(201).json(keyword);
  } catch (err: any) {
    if (err.code === 'P2002') {
      res.status(409).json({ error: 'Keyword already exists for this client' });
      return;
    }
    res.status(500).json({ error: 'Failed to create keyword' });
  }
};

// GET /api/keywords
export const getKeywords = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'Unauthorized' });
      return;
    }
    const clientId = req.user.clientId;
    const keywords = await prisma.keyword.findMany({
      where: { clientId },
      orderBy: { createdAt: 'desc' },
    });
    res.json(keywords);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch keywords' });
  }
};

// DELETE /api/keywords/:id
export const deleteKeyword = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'Unauthorized' });
      return;
    }
    const { id } = req.params;
    if (!id) {
      res.status(400).json({ error: 'Keyword id is required' });
      return;
    }
    const clientId = req.user.clientId;
    // Ensure ownership
    const keyword = await prisma.keyword.findUnique({ where: { id } });
    if (!keyword || keyword.clientId !== clientId) {
      res.status(404).json({ error: 'Keyword not found' });
      return;
    }
    await prisma.keyword.delete({ where: { id } });
    res.status(204).end();
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete keyword' });
  }
};
</file>

<file path="server/src/controllers/mention.controller.ts">
// server/src/controllers/mention.controller.ts

import { Request, Response } from 'express';
import { prisma } from '../utils/prisma';

// GET /api/mentions
export const getMentions = async (req: Request, res: Response): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({ error: 'Unauthorized' });
      return;
    }
    const clientId = req.user.clientId;
    const page = parseInt(req.query.page as string) || 1;
    const pageSize = parseInt(req.query.pageSize as string) || 20;
    const skip = (page - 1) * pageSize;

    const [mentions, total] = await Promise.all([
      prisma.mention.findMany({
        where: { clientId },
        orderBy: { found_at: 'desc' },
        skip,
        take: pageSize,
      }),
      prisma.mention.count({ where: { clientId } }),
    ]);

    res.json({ mentions, total, page, pageSize });
  } catch (error) {
    console.error("Failed to fetch mentions:", error);
    res.status(500).json({ error: 'Failed to fetch mentions' });
  }
};
</file>

<file path="server/src/controllers/post.controller.ts">
import { Request, Response } from 'express';
import { prisma } from '../utils/prisma';

/**
 * Controller for post-related endpoints
 */
export class PostController {
  /**
   * Create a new post
   */
  static async createPost(req: Request, res: Response): Promise<void> {
    try {
      const { title, body, subreddit, scheduled_at } = req.body;
      const { userId, clientId } = req.user!;

      // Validate input
      if (!title || !body || !subreddit) {
        res.status(400).json({ error: 'Title, body, and subreddit are required' });
        return;
      }

      // Create post
      const post = await prisma.post.create({
        data: {
          title,
          body,
          subreddit,
          scheduled_at: scheduled_at ? new Date(scheduled_at) : null,
          authorId: userId,
          clientId
        },
        include: {
          author: {
            select: { email: true }
          }
        }
      });

      res.status(201).json({
        message: 'Post created successfully',
        post
      });
    } catch (error) {
      console.error('Create post error:', error);
      res.status(500).json({ error: 'Failed to create post' });
    }
  }

  /**
   * Get all posts for the authenticated user's client
   */
  static async getPosts(req: Request, res: Response): Promise<void> {
    try {
      const { clientId } = req.user!;
      const { status, page = 1, limit = 10 } = req.query;

      const skip = (Number(page) - 1) * Number(limit);
      const take = Number(limit);

      // Build where clause
      const where: any = { clientId };
      if (status && typeof status === 'string') {
        where.status = status;
      }

      // Get posts with pagination
      const [posts, total] = await Promise.all([
        prisma.post.findMany({
          where,
          include: {
            author: {
              select: { email: true }
            },
            redditAccount: {
              select: { reddit_username: true }
            }
          },
          orderBy: { createdAt: 'desc' },
          skip,
          take
        }),
        prisma.post.count({ where })
      ]);

      res.json({
        posts,
        pagination: {
          page: Number(page),
          limit: Number(limit),
          total,
          pages: Math.ceil(total / Number(limit))
        }
      });
    } catch (error) {
      console.error('Get posts error:', error);
      res.status(500).json({ error: 'Failed to fetch posts' });
    }
  }

  /**
   * Get a specific post by ID
   */
  static async getPost(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const { clientId } = req.user!;

      if (!id) {
        res.status(400).json({ error: 'Post ID is required' });
        return;
      }

      const post = await prisma.post.findFirst({
        where: {
          id,
          clientId
        },
        include: {
          author: {
            select: { email: true }
          },
          redditAccount: {
            select: { reddit_username: true }
          }
        }
      });

      if (!post) {
        res.status(404).json({ error: 'Post not found' });
        return;
      }

      res.json({ post });
    } catch (error) {
      console.error('Get post error:', error);
      res.status(500).json({ error: 'Failed to fetch post' });
    }
  }

  /**
   * Update a post
   */
  static async updatePost(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const { title, body, subreddit, scheduled_at, status } = req.body;
      const { clientId } = req.user!;

      if (!id) {
        res.status(400).json({ error: 'Post ID is required' });
        return;
      }

      // Check if post exists and belongs to user's client
      const existingPost = await prisma.post.findFirst({
        where: {
          id,
          clientId
        }
      });

      if (!existingPost) {
        res.status(404).json({ error: 'Post not found' });
        return;
      }

      // Only allow updates if post is not already posted
      if (existingPost.status === 'Posted') {
        res.status(400).json({ error: 'Cannot update a posted post' });
        return;
      }

      // Build update data
      const updateData: any = {};
      if (title !== undefined) updateData.title = title;
      if (body !== undefined) updateData.body = body;
      if (subreddit !== undefined) updateData.subreddit = subreddit;
      if (scheduled_at !== undefined) updateData.scheduled_at = scheduled_at ? new Date(scheduled_at) : null;
      if (status !== undefined) updateData.status = status;

      const post = await prisma.post.update({
        where: { id },
        data: updateData,
        include: {
          author: {
            select: { email: true }
          }
        }
      });

      res.json({
        message: 'Post updated successfully',
        post
      });
    } catch (error) {
      console.error('Update post error:', error);
      res.status(500).json({ error: 'Failed to update post' });
    }
  }

  /**
   * Delete a post
   */
  static async deletePost(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const { clientId } = req.user!;

      if (!id) {
        res.status(400).json({ error: 'Post ID is required' });
        return;
      }

      // Check if post exists and belongs to user's client
      const existingPost = await prisma.post.findFirst({
        where: {
          id,
          clientId
        }
      });

      if (!existingPost) {
        res.status(404).json({ error: 'Post not found' });
        return;
      }

      // Only allow deletion if post is not already posted
      if (existingPost.status === 'Posted') {
        res.status(400).json({ error: 'Cannot delete a posted post' });
        return;
      }

      await prisma.post.delete({
        where: { id }
      });

      res.json({ message: 'Post deleted successfully' });
    } catch (error) {
      console.error('Delete post error:', error);
      res.status(500).json({ error: 'Failed to delete post' });
    }
  }

  /**
   * Schedule a post for posting
   */
  static async schedulePost(req: Request, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const { scheduled_at, redditAccountId } = req.body || {};
      const { clientId } = req.user!;

      if (!id) {
        res.status(400).json({ error: 'Post ID is required' });
        return;
      }

      if (!scheduled_at) {
        res.status(400).json({ 
          error: 'Scheduled time is required',
          message: 'Please provide scheduled_at in the request body'
        });
        return;
      }

      // Check if post exists and belongs to user's client
      const existingPost = await prisma.post.findFirst({
        where: {
          id,
          clientId
        }
      });

      if (!existingPost) {
        res.status(404).json({ error: 'Post not found' });
        return;
      }

      if (existingPost.status === 'Posted') {
        res.status(400).json({ error: 'Cannot schedule a posted post' });
        return;
      }

      // Verify reddit account belongs to client
      if (redditAccountId) {
        const redditAccount = await prisma.redditAccount.findFirst({
          where: {
            id: redditAccountId,
            clientId
          }
        });

        if (!redditAccount) {
          res.status(400).json({ error: 'Invalid Reddit account' });
          return;
        }
      }

      const post = await prisma.post.update({
        where: { id },
        data: {
          scheduled_at: new Date(scheduled_at),
          status: 'Scheduled',
          redditAccountId
        },
        include: {
          author: {
            select: { email: true }
          },
          redditAccount: {
            select: { reddit_username: true }
          }
        }
      });

      res.json({
        message: 'Post scheduled successfully',
        post
      });
    } catch (error) {
      console.error('Schedule post error:', error);
      res.status(500).json({ error: 'Failed to schedule post' });
    }
  }
}
</file>

<file path="server/src/middleware/auth.middleware.ts">
import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';
import { prisma } from '../utils/prisma';

// Extend Express Request interface to include user data
declare global {
  namespace Express {
    interface Request {
      user?: {
        userId: string;
        clientId: string;
        role: string;
      };
    }
  }
}

/**
 * Middleware to authenticate JWT tokens and attach user data to request
 */
export const authenticateToken = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<void> => {
  try {
    const authHeader = req.headers.authorization;
    const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN

    if (!token) {
      res.status(401).json({ error: 'Access token required' });
      return;
    }

    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) {
      res.status(500).json({ error: 'JWT secret not configured' });
      return;
    }

    // Verify the token
    const decoded = jwt.verify(token, jwtSecret) as {
      userId: string;
      clientId: string;
      role: string;
      iat: number;
      exp: number;
    };

    // Verify user still exists in database
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: { id: true, clientId: true, role: true }
    });

    if (!user) {
      res.status(401).json({ error: 'User not found' });
      return;
    }

    // Attach user data to request
    req.user = {
      userId: user.id,
      clientId: user.clientId,
      role: user.role
    };

    next();
  } catch (error) {
    if (error instanceof jwt.JsonWebTokenError) {
      res.status(401).json({ error: 'Invalid token' });
    } else if (error instanceof jwt.TokenExpiredError) {
      res.status(401).json({ error: 'Token expired' });
    } else {
      console.error('Auth middleware error:', error);
      res.status(500).json({ error: 'Authentication failed' });
    }
  }
};

/**
 * Middleware to check if user has admin role
 */
export const requireAdmin = (
  req: Request,
  res: Response,
  next: NextFunction
): void => {
  if (!req.user) {
    res.status(401).json({ error: 'Authentication required' });
    return;
  }

  if (req.user.role !== 'ADMIN') {
    res.status(403).json({ error: 'Admin access required' });
    return;
  }

  next();
};
</file>

<file path="server/src/routes/ai.routes.ts">
import { Router } from 'express';
import { AIController } from '../controllers/ai.controller';
import { authenticateToken } from '../middleware/auth.middleware';

const router = Router();

// All routes require authentication
router.use(authenticateToken);

/**
 * @route POST /api/ai/draft
 * @desc Generate a Reddit post draft using AI
 * @access Private
 */
router.post('/draft', AIController.generateDraft);

/**
 * @route GET /api/ai/tones
 * @desc Get available tones for AI generation
 * @access Private
 */
router.get('/tones', AIController.getTones);

export default router;
</file>

<file path="server/src/routes/keyword.routes.ts">
// server/src/routes/keyword.routes.ts

import { Router } from 'express';
import { createKeyword, getKeywords, deleteKeyword } from '../controllers/keyword.controller';
import { authenticateToken } from '../middleware/auth.middleware';

const router = Router();

router.use(authenticateToken);

router.post('/', createKeyword);
router.get('/', getKeywords);
router.delete('/:id', deleteKeyword);

export default router;
</file>

<file path="server/src/routes/mention.routes.ts">
// server/src/routes/mention.routes.ts

import { Router } from 'express';
import { getMentions } from '../controllers/mention.controller';
import { authenticateToken } from '../middleware/auth.middleware';

const router = Router();

router.use(authenticateToken);

router.get('/', getMentions);

export default router;
</file>

<file path="server/src/routes/post.routes.ts">
import { Router } from 'express';
import { PostController } from '../controllers/post.controller';
import { authenticateToken } from '../middleware/auth.middleware';

const router = Router();

// All routes require authentication
router.use(authenticateToken);

/**
 * @route POST /api/posts
 * @desc Create a new post
 * @access Private
 */
router.post('/', PostController.createPost);

/**
 * @route GET /api/posts
 * @desc Get all posts for the authenticated user's client
 * @access Private
 */
router.get('/', PostController.getPosts);

/**
 * @route GET /api/posts/:id
 * @desc Get a specific post by ID
 * @access Private
 */
router.get('/:id', PostController.getPost);

/**
 * @route PUT /api/posts/:id
 * @desc Update a post
 * @access Private
 */
router.put('/:id', PostController.updatePost);

/**
 * @route DELETE /api/posts/:id
 * @desc Delete a post
 * @access Private
 */
router.delete('/:id', PostController.deletePost);

/**
 * @route POST /api/posts/:id/schedule
 * @desc Schedule a post for posting
 * @access Private
 */
router.post('/:id/schedule', PostController.schedulePost);

export default router;
</file>

<file path="server/src/routes/test.routes.ts">
import { Router } from 'express';
import { authenticateToken } from '../middleware/auth.middleware';
import { io } from '../index';
import { prisma } from '../utils/prisma';

const router = Router();

// Test endpoint to trigger a socket event
router.post('/trigger-mention', authenticateToken, async (req, res) => {
  try {
    const clientId = req.user?.clientId;
    if (!clientId) {
      return res.status(400).json({ error: 'Client ID not found' });
    }

    // Fetch a valid keyword for this client
    const keyword = await prisma.keyword.findFirst({ where: { clientId } });
    if (!keyword) {
      return res.status(400).json({ error: 'No keyword found for this client. Please create a keyword first.' });
    }

    // Create a test mention in the database
    const testMention = await prisma.mention.create({
      data: {
        source_url: `https://reddit.com/test/${Date.now()}`,
        content_snippet: `Test mention created at ${new Date().toISOString()} - This is a test to verify socket connectivity is working properly.`,
        author: 'test_user',
        subreddit: 'test',
        sentiment: 'NEUTRAL',
        found_at: new Date(),
        keywordId: keyword.id,
        clientId: clientId,
      },
    });

    // Emit the test mention to the client's room
    io.to(clientId).emit('new_mention', testMention);
    
    console.log(`Test mention emitted to client ${clientId}:`, testMention);

    return res.json({ 
      success: true, 
      message: 'Test mention created and emitted',
      mention: testMention 
    });
  } catch (error) {
    console.error('Error creating test mention:', error);
    return res.status(500).json({ error: 'Failed to create test mention' });
  }
});

// Test endpoint to check socket connection status
router.get('/socket-status', authenticateToken, (req, res) => {
  try {
    const clientId = req.user?.clientId;
    if (!clientId) {
      return res.status(400).json({ error: 'Client ID not found' });
    }

    // Get connected sockets for this client
    const room = io.sockets.adapter.rooms.get(clientId);
    const connectedSockets = room ? room.size : 0;

    return res.json({
      clientId,
      connectedSockets,
      totalConnections: io.engine.clientsCount,
      roomExists: !!room
    });
  } catch (error) {
    console.error('Error checking socket status:', error);
    return res.status(500).json({ error: 'Failed to check socket status' });
  }
});

export default router;
</file>

<file path="server/src/services/encryption.service.ts">
import crypto from 'crypto';

/**
 * Service for encrypting and decrypting sensitive data like Reddit API tokens
 */
export class EncryptionService {
  private readonly algorithm = 'aes-256-cbc';
  private readonly key: Buffer;
  private readonly iv: Buffer;

  constructor() {
    const encryptionKey = process.env.ENCRYPTION_KEY;
    const encryptionIV = process.env.ENCRYPTION_IV;

    if (!encryptionKey || !encryptionIV) {
      throw new Error('ENCRYPTION_KEY and ENCRYPTION_IV must be set in environment variables');
    }

    // Ensure the key is exactly 32 bytes (256 bits)
    this.key = Buffer.from(encryptionKey, 'hex');
    if (this.key.length !== 32) {
      throw new Error('ENCRYPTION_KEY must be a 64-character hex string (32 bytes)');
    }

    // Ensure the IV is exactly 16 bytes (128 bits)
    this.iv = Buffer.from(encryptionIV, 'hex');
    if (this.iv.length !== 16) {
      throw new Error('ENCRYPTION_IV must be a 32-character hex string (16 bytes)');
    }
  }

  /**
   * Encrypts a plain text string
   * @param text - The plain text to encrypt
   * @returns The encrypted text as a hex string
   */
  encrypt(text: string): string {
    try {
      const cipher = crypto.createCipheriv(this.algorithm, this.key, this.iv);
      let encrypted = cipher.update(text, 'utf8', 'hex');
      encrypted += cipher.final('hex');
      return encrypted;
    } catch (error) {
      throw new Error(`Encryption failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Decrypts an encrypted text string
   * @param encryptedText - The encrypted text as a hex string
   * @returns The decrypted plain text
   */
  decrypt(encryptedText: string): string {
    try {
      const decipher = crypto.createDecipheriv(this.algorithm, this.key, this.iv);
      let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
      decrypted += decipher.final('utf8');
      return decrypted;
    } catch (error) {
      throw new Error(`Decryption failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
}

// Export a singleton instance
export const encryptionService = new EncryptionService();
</file>

<file path="server/src/utils/prisma.ts">
import { PrismaClient } from '@prisma/client';

/**
 * Global Prisma client instance
 * In development, this will be a new instance on each hot reload
 * In production, this will be reused across requests
 */
declare global {
  // eslint-disable-next-line no-var
  var __prisma: PrismaClient | undefined;
}

export const prisma = globalThis.__prisma || new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],
});

if (process.env.NODE_ENV !== 'production') {
  globalThis.__prisma = prisma;
}
</file>

<file path="server/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "removeComments": true,
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "exactOptionalPropertyTypes": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
</file>

<file path=".cursor/rules/bento-grid.mdc">
# Bento Grid UI & Animation Guidelines

- The bento grid section is implemented in [page.tsx](mdc:client/src/app/page.tsx) and styled in [globals.css](mdc:client/src/app/globals.css).
- Use a clean, professional layout with ample white space and subtle slate backgrounds.
- Minimize the use of orange; use it only for accents or highlights, not as a dominant background.
- Ensure the grid is fully responsive: use `sm`, `md`, and `col-span` classes to adapt to all screen sizes.
- Card backgrounds should be white or light slate, with soft borders and shadows for separation.
- Animations should be subtle: use gentle fade/slide-in for entrance and light hover elevation.
- Typography and spacing should match the hero section for a cohesive look.
- Avoid visual clutter and keep the interface modern and easy to scan.
</file>

<file path="client/src/app/ClientBody.tsx">
"use client";

import { useEffect } from "react";

export default function ClientBody({
  children,
}: {
  children: React.ReactNode;
}) {
  // Remove any extension-added classes during hydration and enforce light mode
  useEffect(() => {
    // This runs only on the client after hydration
    document.body.className = "antialiased";
    
    // Ensure light mode is enforced
    document.documentElement.classList.remove('dark');
    document.documentElement.classList.add('light');
    
    // Store light mode preference in localStorage
    localStorage.setItem('theme-preference', 'light');
  }, []);

  return <div className="antialiased">{children}</div>;
}
</file>

<file path="client/src/app/socket-test/page.tsx">
// client/src/app/socket-test/page.tsx

"use client";

import React, { useEffect, useState } from 'react';
import { useSocketContext } from '@/contexts/SocketContext';
import { useAuth } from '@/lib/auth';

interface Mention {
  id: string;
  source_url: string;
  content_snippet: string;
  author: string;
  subreddit: string;
  sentiment: 'POSITIVE' | 'NEUTRAL' | 'NEGATIVE' | 'UNKNOWN';
  found_at: string;
  keywordId: string;
  clientId: string;
}

export default function SocketTestPage() {
  const { socket, lastMention } = useSocketContext();
  const { user } = useAuth();
  const [connectionStatus, setConnectionStatus] = useState<string>('Disconnected');
  const [mentions, setMentions] = useState<Mention[]>([]);
  const [logs, setLogs] = useState<string[]>([]);

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString();
    setLogs(prev => [...prev.slice(-9), `[${timestamp}] ${message}`]);
  };

  useEffect(() => {
    if (!socket) {
      setConnectionStatus('No socket instance');
      addLog('No socket instance available');
      return;
    }

    const handleConnect = () => {
      setConnectionStatus('Connected');
      addLog('Socket connected successfully');
    };

    const handleDisconnect = () => {
      setConnectionStatus('Disconnected');
      addLog('Socket disconnected');
    };

    const handleConnectError = (error: unknown) => {
      setConnectionStatus('Connection Error');
      addLog(`Connection error: ${typeof error === 'object' && error && 'message' in error ? (error as { message?: string }).message : String(error)}`);
    };

    const handleNewMention = (mention: Mention) => {
      addLog(`New mention received: ${mention.content_snippet.substring(0, 50)}...`);
      setMentions(prev => [mention, ...prev.slice(0, 9)]);
    };

    // Check initial connection status
    if (socket.connected) {
      setConnectionStatus('Connected');
      addLog('Socket already connected');
    } else {
      setConnectionStatus('Connecting...');
      addLog('Socket connecting...');
    }

    // Add event listeners
    socket.on('connect', handleConnect);
    socket.on('disconnect', handleDisconnect);
    socket.on('connect_error', handleConnectError);
    socket.on('new_mention', handleNewMention);

    return () => {
      socket.off('connect', handleConnect);
      socket.off('disconnect', handleDisconnect);
      socket.off('connect_error', handleConnectError);
      socket.off('new_mention', handleNewMention);
    };
  }, [socket]);

  useEffect(() => {
    if (lastMention) {
      addLog(`Context updated with new mention: ${lastMention.content_snippet.substring(0, 50)}...`);
    }
  }, [lastMention]);

  const triggerTestMention = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/test/trigger-mention`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        addLog('Test mention trigger sent');
      } else {
        const errorData = await response.json();
        addLog(`Failed to trigger test mention: ${response.status} - ${errorData.error || 'Unknown error'}`);
      }
    } catch (error: unknown) {
      addLog(`Error triggering test mention: ${String(error)}`);
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center pt-20">
        <div className="text-center p-8 bg-white rounded-xl shadow-sm border border-slate-200">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Socket Test</h1>
          <p className="text-gray-600">Please log in to test the socket connection.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6 pt-24">
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">Socket Connection Test</h1>
        
        {/* Connection Status */}
        <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Connection Status</h2>
          <div className="flex items-center gap-4">
            <div className={`w-3 h-3 rounded-full ${
              connectionStatus === 'Connected' ? 'bg-green-500' : 
              connectionStatus === 'Connecting...' ? 'bg-yellow-500' : 'bg-red-500'
            }`}></div>
            <span className="font-medium text-lg">{connectionStatus}</span>
          </div>
          <div className="mt-4 text-sm text-gray-600">
            <p>User: <span className="font-mono">{user.email}</span></p>
            <p>Client ID: <span className="font-mono">{user.clientId}</span></p>
            <p>Socket Instance: {socket ? <span className="text-green-600 font-semibold">Available</span> : <span className="text-red-600 font-semibold">Not Available</span>}</p>
          </div>
        </div>

        {/* Test Controls */}
        <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6 mb-6">
          <h2 className="text-xl font-semibold mb-4">Test Controls</h2>
          <button
            onClick={triggerTestMention}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md font-medium"
          >
            Trigger Test Mention
          </button>
           <p className="text-xs text-slate-500 mt-2">Note: You must have at least one keyword added on the Monitoring page for this to work.</p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Connection Logs */}
          <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6">
            <h2 className="text-xl font-semibold mb-4">Connection Logs</h2>
            <div className="bg-gray-800 text-white rounded p-4 h-64 overflow-y-auto font-mono text-xs">
              {logs.length === 0 ? (
                <p className="text-gray-400">No logs yet...</p>
              ) : (
                logs.map((log, index) => (
                  <div key={index} className="mb-1">
                    {log}
                  </div>
                ))
              )}
            </div>
          </div>

          {/* Recent Mentions */}
          <div className="bg-white rounded-lg shadow-sm border border-slate-200 p-6">
            <h2 className="text-xl font-semibold mb-4">Recent Mentions (via Socket)</h2>
            <div className="space-y-3 h-64 overflow-y-auto">
              {mentions.length === 0 ? (
                <p className="text-gray-500">No mentions received yet...</p>
              ) : (
                mentions.map((mention, index) => (
                  <div key={index} className="border border-slate-200 rounded p-3 bg-slate-50">
                    <div className="flex items-center gap-2 mb-2">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        mention.sentiment === 'POSITIVE' ? 'bg-green-100 text-green-800' :
                        mention.sentiment === 'NEGATIVE' ? 'bg-red-100 text-red-800' :
                        'bg-gray-200 text-gray-800'
                      }`}>
                        {mention.sentiment}
                      </span>
                      <span className="text-sm text-gray-600">r/{mention.subreddit}</span>
                    </div>
                    <p className="text-sm">{mention.content_snippet}</p>
                    <p className="text-xs text-gray-500 mt-1">by u/{mention.author}</p>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
</file>

<file path="client/src/lib/auth.tsx">
"use client";
import React, { createContext, useContext, useEffect, useState } from "react";
import api from "@/lib/axios";

interface User {
  id: string;
  email: string;
  role: string;
  clientId: string;
  clientName: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (token: string) => Promise<void>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      // Try to fetch user info
      Promise.resolve(api.get<{ user: User }>("/api/auth/me"))
        .then((res) => setUser(res.data.user))
        .catch(() => setUser(null))
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, []);

  const login = async (token: string) => {
    localStorage.setItem("token", token);
    setLoading(true);
    try {
      const res = await api.get<{ user: User }>("/api/auth/me");
      setUser(res.data.user);
    } catch {
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, loading, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export function useAuth() {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used within AuthProvider");
  return ctx;
}
</file>

<file path="client/src/lib/axios.ts">
// If you haven't already, run: npm install axios @types/axios
import axios from "axios";
// TODO: Type config parameter more strictly if axios types are available

const api = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:3000",
  withCredentials: false, // CORS, but no cookies needed for JWT
  headers: {
    "Content-Type": "application/json",
  },
});

api.interceptors.request.use((config) => {
  if (typeof window !== "undefined") {
    const token = localStorage.getItem("token");
    if (token) {
      if (!config.headers) config.headers = {};
      config.headers["Authorization"] = `Bearer ${token}`;
    }
  }
  return config;
});

export default api;
</file>

<file path="client/src/lib/theme.tsx">
"use client";
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';

// Types for theme
export type Theme = 'light' | 'dark';

interface ThemeContextType {
  theme: Theme;
  toggleTheme: () => void;
  setTheme: (theme: Theme) => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

const THEME_KEY = 'theme-preference';

// Always return light as default
function getDefaultTheme(): Theme {
  return 'light';
}

export const ThemeProvider = ({ children }: { children: ReactNode }) => {
  const [theme, setThemeState] = useState<Theme>('light');

  // Set theme and persist
  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
    if (typeof window !== 'undefined') {
      localStorage.setItem(THEME_KEY, newTheme);
    }
  };

  // Toggle theme
  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  // On mount: load from localStorage or use light mode
  useEffect(() => {
    if (typeof window === 'undefined') return;
    const saved = localStorage.getItem(THEME_KEY) as Theme | null;
    // Default to light mode if no preference is saved
    setThemeState(saved || 'light');
  }, []);

  // Apply theme class to <html>
  useEffect(() => {
    if (typeof document === 'undefined') return;
    const root = document.documentElement;
    if (theme === 'dark') {
      root.classList.add('dark');
    } else {
      root.classList.remove('dark');
    }
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export function useTheme() {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
}
</file>

<file path="server/API_DOCUMENTATION.md">
# Reddit Post Management SaaS - API Documentation

## 📋 Table of Contents
- [Overview](#overview)
- [Base URL](#base-url)
- [Authentication](#authentication)
- [Error Handling](#error-handling)
- [Health Check](#health-check)
- [Authentication APIs](#authentication-apis)
- [Post Management APIs](#post-management-apis)
- [Monitoring & Analytics APIs](#monitoring--analytics-apis)
- [AI APIs](#ai-apis)
- [Testing & Debugging APIs](#testing--debugging-apis)
- [Data Models](#data-models)
- [Testing Examples](#testing-examples)
- [Environment Variables](#environment-variables)
- [Notes](#notes)

## 🌐 Overview

This API provides a complete backend for managing Reddit posts with AI-assisted content generation, secure token storage, automated scheduling, and real-time keyword monitoring.

**Features:**
- User authentication with JWT
- Multi-tenant client management
- Reddit OAuth integration with encrypted token storage
- AI-powered content generation (Google Gemini)
- Automated post scheduling
- Real-time Reddit keyword monitoring with WebSocket alerts

## 🔗 Base URL

```
Development: http://localhost:3001
Production: https://your-domain.com
```

## 🔐 Authentication

Most endpoints require authentication using JWT tokens.

**Header Format:**
```
Authorization: Bearer <your_jwt_token>
```

**Getting a Token:**
1. Register a user: `POST /api/auth/register`
2. Login: `POST /api/auth/login`
3. Use the returned token in subsequent requests

## ⚠️ Error Handling

All endpoints return consistent error responses:

```json
{
  "error": "Error message description"
}
```

**Common HTTP Status Codes:**
- `200` - Success
- `201` - Created
- `204` - No Content
- `400` - Bad Request
- `401` - Unauthorized
- `403` - Forbidden
- `404` - Not Found
- `409` - Conflict
- `500` - Internal Server Error

---

## 🏥 Health Check

### GET `/health`

Check if the server is running.

**No authentication required**

**Response (200):**
```json
{
  "status": "OK",
  "timestamp": "2024-01-15T10:00:00.000Z",
  "environment": "development"
}
```

---

## 🔑 Authentication APIs

### POST `/api/auth/register`

Register a new user and create a client organization.

**Request Body:**
```json
{
  "email": "user@example.com",
  "password": "securepassword",
  "clientName": "My Company"
}
```

**Response (201):**
```json
{
  "message": "User registered successfully",
  "clientId": "cl_abc123...",
  "userId": "user_xyz789..."
}
```

### POST `/api/auth/login`

Authenticate user and get JWT token.

**Request Body:**
```json
{
  "email": "user@example.com",
  "password": "securepassword"
}
```

**Response (200):**
```json
{
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": "user_xyz789...",
    "email": "user@example.com",
    "role": "CLIENT_USER",
    "clientId": "cl_abc123...",
    "clientName": "My Company"
  }
}
```

### GET `/api/auth/me`

Get information for the currently authenticated user.

**Headers:** `Authorization: Bearer <token>`

**Response (200):**
```json
{
  "user": {
    "id": "user_xyz789...",
    "email": "user@example.com",
    "role": "CLIENT_USER",
    "clientId": "cl_abc123...",
    "clientName": "My Company"
  }
}
```

### POST `/api/auth/reddit/oauth/connect`

Get Reddit OAuth URL for connecting a Reddit account.

**Headers:** `Authorization: Bearer <token>`

**Response (200):**
```json
{
  "authUrl": "https://www.reddit.com/api/v1/authorize?client_id=...&response_type=code&state=...&redirect_uri=...&duration=permanent&scope=identity,submit,read"
}
```

### GET `/api/auth/reddit/oauth/callback`

Handle Reddit OAuth callback and save tokens. The frontend should capture the `code` and `state` from the URL after Reddit redirects, then call this backend endpoint.

**Headers:** `Authorization: Bearer <token>`

**Query Parameters:**
- `code`: Authorization code from Reddit
- `state`: State parameter for security

**Response (200):**
```json
{
  "message": "Reddit account connected successfully",
  "redditUsername": "my_reddit_username"
}
```

### GET `/api/auth/reddit/accounts`

List all connected Reddit accounts for the client.

**Headers:** `Authorization: Bearer <token>`

**Response (200):**
```json
{
  "accounts": [
    {
      "id": "acct_abc123...",
      "reddit_username": "my_reddit_username",
      "token_expires_at": "2025-01-15T10:00:00.000Z",
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z"
    }
  ]
}
```

---

## 📝 Post Management APIs

All endpoints require authentication.

### POST `/api/posts`

Create a new post.

**Request Body:**
```json
{
  "title": "My Reddit Post Title",
  "body": "This is the content of my post.",
  "subreddit": "programming",
  "scheduled_at": "2024-01-15T15:00:00Z" // Optional
}
```

**Response (201):**
```json
{
  "message": "Post created successfully",
  "post": {
    "id": "post_abc123...",
    "title": "My Reddit Post Title",
    "body": "This is the content of my post...",
    "subreddit": "programming",
    "status": "Draft",
    "scheduled_at": "2024-01-15T15:00:00.000Z",
    "author": {
      "email": "user@example.com"
    }
  }
}
```

### GET `/api/posts`

Get all posts for the client, with pagination.

**Query Parameters:**
- `page` (optional): Page number (default: 1)
- `limit` (optional): Items per page (default: 10)
- `status` (optional): Filter by `Draft`, `Scheduled`, `Posted`, `Error`

**Response (200):**
```json
{
  "posts": [
    {
      "id": "post_abc123...",
      "title": "My Reddit Post",
      "subreddit": "programming",
      "status": "Draft",
      "scheduled_at": null,
      "author": { "email": "user@example.com" },
      "redditAccount": { "reddit_username": "my_reddit_username" }
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 25,
    "pages": 3
  }
}
```

### GET `/api/posts/:id` / PUT `/api/posts/:id` / DELETE `/api/posts/:id`

Standard CRUD operations for a specific post. `PUT` cannot be used on a `Posted` post. `DELETE` cannot be used on a `Posted` post.

### POST `/api/posts/:id/schedule`

Schedule a post for a specific time.

**Request Body:**
```json
{
  "scheduled_at": "2024-01-15T16:00:00Z",
  "redditAccountId": "acct_xyz789..."
}
```

**Response (200):**
```json
{
  "message": "Post scheduled successfully",
  "post": {
    "id": "post_abc123...",
    "status": "Scheduled",
    "scheduled_at": "2024-01-15T16:00:00.000Z"
  }
}
```

---

## 📈 Monitoring & Analytics APIs

All endpoints require authentication.

### POST `/api/keywords`

Create a new keyword for the client to monitor.

**Request Body:**
```json
{ "term": "customer service" }
```

**Response (201):**
```json
{
  "id": "kw_abc123...",
  "term": "customer service",
  "is_active": true,
  "createdAt": "2024-01-15T10:00:00.000Z",
  "lastScannedAt": null,
  "clientId": "cl_abc123..."
}
```

### GET `/api/keywords`

List all keywords for the client.

**Response (200):**
```json
[
  {
    "id": "kw_abc123...",
    "term": "customer service",
    "is_active": true
  }
]
```

### DELETE `/api/keywords/:id`

Delete a specific keyword by its ID.

**Response (204):** No content.

### GET `/api/mentions`

Get a paginated list of all mentions found for the client's keywords.

**Query Parameters:**
- `page` (optional): Page number (default: 1)
- `pageSize` (optional): Items per page (default: 20)

**Response (200):**
```json
{
  "mentions": [
    {
      "id": "mention_abc123...",
      "source_url": "https://reddit.com/...",
      "content_snippet": "A snippet of the post or comment...",
      "author": "reddit_user",
      "subreddit": "programming",
      "sentiment": "NEUTRAL",
      "found_at": "2024-01-15T10:00:00.000Z"
    }
  ],
  "total": 50,
  "page": 1,
  "pageSize": 20
}
```

---

## 🤖 AI APIs

All endpoints require authentication.

### POST `/api/ai/draft`

Generate AI-powered post content using Google Gemini.

**Request Body:**
```json
{
  "keywords": "programming tips for beginners",
  "tone": "story"
}
```

**Response (200):**
```json
{
  "title": "How I Learned Programming: A Beginner's Journey",
  "body": "When I first started learning to code...",
  "keywords": "programming tips for beginners",
  "tone": "story"
}
```

### GET `/api/ai/tones`

Get available AI generation tones.

**Response (200):**
```json
{
  "tones": [
    { "value": "story", "label": "Personal Story", "description": "..." },
    { "value": "question", "label": "Discussion Question", "description": "..." },
    { "value": "experience", "label": "Experience Share", "description": "..." }
  ]
}
```

---

## 🧪 Testing & Debugging APIs

### POST `/api/test/trigger-mention`

Manually triggers a `new_mention` WebSocket event for the authenticated client. Requires at least one keyword to exist for the client.

**Headers:** `Authorization: Bearer <token>`

**Response (200):**
```json
{
  "success": true,
  "message": "Test mention created and emitted",
  "mention": { /* The test mention object */ }
}
```

### GET `/api/test/socket-status`

Checks the current WebSocket connection status for the client.

**Headers:** `Authorization: Bearer <token>`

**Response (200):**
```json
{
  "clientId": "cl_abc123...",
  "connectedSockets": 1,
  "totalConnections": 5,
  "roomExists": true
}
```
---

## 📊 Data Models

### Enums
```typescript
enum PostStatus { Draft, Scheduled, Posted, Error }
enum Role { ADMIN, CLIENT_USER }
enum Sentiment { POSITIVE, NEUTRAL, NEGATIVE, UNKNOWN }
```

### Core Objects
```typescript
interface Post {
  id: string;
  title: string;
  body: string;
  subreddit: string;
  status: PostStatus;
  scheduled_at?: Date;
  // ... other fields
}

interface Keyword {
  id: string;
  term: string;
  is_active: boolean;
  lastScannedAt?: Date;
}

interface Mention {
  id: string;
  source_url: string;
  content_snippet: string;
  author: string;
  subreddit: string;
  sentiment: Sentiment;
  found_at: Date;
}
```

---

## 🧪 Testing Examples

Use `curl`, Postman, or any other API client.

**1. Register a user:**
```bash
curl -X POST http://localhost:3001/api/auth/register \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "password": "password123",
    "clientName": "Test Company"
  }'
```

**2. Login and get a token:**
```bash
curl -X POST http://localhost:3001/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "password": "password123"
  }'
```

**3. Add a keyword (using the token):**
```bash
curl -X POST http://localhost:3001/api/keywords \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{"term": "new feature"}'
```
---

## 🔧 Environment Variables

Required `.env` variables for the server to function:

```bash
# Server
PORT=3001
NODE_ENV=development
FRONTEND_URL=http://localhost:5173

# Database
DATABASE_URL="postgresql://user:pass@host:port/db?schema=public"

# Security
JWT_SECRET=your_jwt_secret_here
ENCRYPTION_KEY=your_32_byte_encryption_key_hex
ENCRYPTION_IV=your_16_byte_encryption_iv_hex

# Reddit OAuth
REDDIT_CLIENT_ID=your_reddit_client_id
REDDIT_CLIENT_SECRET=your_reddit_client_secret
REDDIT_REDIRECT_URI=http://localhost:3001/api/auth/reddit/oauth/callback

# Google Gemini
GEMINI_API_KEY=your_google_gemini_api_key
```

---

## 📝 Notes
- All timestamps are in ISO 8601 format.
- IDs are CUIDs for security and uniqueness.
- Passwords are hashed with bcryptjs.
- Reddit tokens are encrypted with AES-256-CBC.
- A scheduler runs to process scheduled posts and monitor keywords.
- Real-time monitoring alerts are sent via WebSockets. Clients must connect with a valid JWT.
</file>

<file path="server/prisma/schema.prisma">
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT_USER
}

enum PostStatus {
  Draft
  Scheduled
  Posted
  Error
}

model Client {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users           User[]
  redditAccounts  RedditAccount[]
  posts           Post[]
  keywords        Keyword[]
  mentions        Mention[]

  @@map("clients")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(CLIENT_USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  posts Post[]

  @@map("users")
}

model RedditAccount {
  id                String    @id @default(cuid())
  reddit_username   String
  access_token      String    // Encrypted
  refresh_token     String    // Encrypted
  token_expires_at  DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  posts Post[]

  @@map("reddit_accounts")
}

model Post {
  id              String     @id @default(cuid())
  title           String
  body            String
  subreddit       String
  status          PostStatus @default(Draft)
  scheduled_at    DateTime?
  posted_at       DateTime?
  reddit_post_id  String?
  error_message   String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId String

  client   Client @relation(fields: [clientId], references: [id])
  clientId String

  redditAccount   RedditAccount? @relation(fields: [redditAccountId], references: [id])
  redditAccountId String?

  @@map("posts")
}

// --- Monitoring & Analytics Additions ---
enum Sentiment {
  POSITIVE
  NEUTRAL
  NEGATIVE
  UNKNOWN
}

model Keyword {
  id            String    @id @default(cuid())
  term          String
  is_active     Boolean   @default(true)
  createdAt     DateTime  @default(now())
  lastScannedAt DateTime?
  client        Client    @relation(fields: [clientId], references: [id])
  clientId      String
  mentions      Mention[]

  @@unique([term, clientId])
  @@map("keywords")
}

model Mention {
  id            String    @id @default(cuid())
  source_url    String    @unique
  content_snippet String  @db.Text
  author        String
  subreddit     String
  sentiment     Sentiment @default(UNKNOWN)
  found_at      DateTime
  keyword       Keyword   @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId     String
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String

  @@map("mentions")
}
</file>

<file path="server/src/controllers/auth.controller.ts">
import { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import axios from 'axios';
import { prisma } from '../utils/prisma';
import { encryptionService } from '../services/encryption.service';

/**
 * Controller for authentication-related endpoints
 */
export class AuthController {
  /**
   * Register a new user and client
   */
  static async register(req: Request, res: Response): Promise<void> {
    try {
      const { email, password, clientName } = req.body;

      // Validate input
      if (!email || !password || !clientName) {
        res.status(400).json({ error: 'Email, password, and client name are required' });
        return;
      }

      if (password.length < 6) {
        res.status(400).json({ error: 'Password must be at least 6 characters long' });
        return;
      }

      // Check if user already exists
      const existingUser = await prisma.user.findUnique({
        where: { email }
      });

      if (existingUser) {
        res.status(409).json({ error: 'User with this email already exists' });
        return;
      }

      // Hash password
      const saltRounds = 12;
      const hashedPassword = await bcrypt.hash(password, saltRounds);

      // Create client and user in a transaction
      const result = await prisma.$transaction(async (tx: any) => {
        // Create client
        const client = await tx.client.create({
          data: { name: clientName }
        });

        // Create user
        const user = await tx.user.create({
          data: {
            email,
            password: hashedPassword,
            clientId: client.id
          }
        });

        return { client, user };
      });

      res.status(201).json({
        message: 'User registered successfully',
        clientId: result.client.id,
        userId: result.user.id
      });
    } catch (error) {
      console.error('Registration error:', error);
      res.status(500).json({ error: 'Registration failed' });
    }
  }

  /**
   * Login user
   */
  static async login(req: Request, res: Response): Promise<void> {
    try {
      const { email, password } = req.body;

      // Validate input
      if (!email || !password) {
        res.status(400).json({ error: 'Email and password are required' });
        return;
      }

      // Find user with client information
      const user = await prisma.user.findUnique({
        where: { email },
        include: {
          client: {
            select: { id: true, name: true }
          }
        }
      });

      if (!user) {
        res.status(401).json({ error: 'Invalid credentials' });
        return;
      }

      // Verify password
      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        res.status(401).json({ error: 'Invalid credentials' });
        return;
      }

      // Generate JWT token
      const jwtSecret = process.env.JWT_SECRET;
      if (!jwtSecret) {
        res.status(500).json({ error: 'JWT secret not configured' });
        return;
      }

      const token = jwt.sign(
        {
          userId: user.id,
          clientId: user.clientId,
          role: user.role
        },
        jwtSecret,
        { expiresIn: '24h' }
      );

      res.json({
        token,
        user: {
          id: user.id,
          email: user.email,
          role: user.role,
          clientId: user.clientId,
          clientName: user.client.name
        }
      });
    } catch (error) {
      console.error('Login error:', error);
      res.status(500).json({ error: 'Login failed' });
    }
  }

  /**
   * Get Reddit OAuth URL for connecting account
   */
  static async getRedditOAuthUrl(req: Request, res: Response): Promise<void> {
    try {
      const clientId = process.env.REDDIT_CLIENT_ID;
      const redirectUri = process.env.REDDIT_REDIRECT_URI;

      if (!clientId || !redirectUri) {
        res.status(500).json({ error: 'Reddit OAuth not configured' });
        return;
      }

      const scopes = ['identity', 'submit', 'read'];
      const state = Math.random().toString(36).substring(7);

      const authUrl = `https://www.reddit.com/api/v1/authorize?client_id=${clientId}&response_type=code&state=${state}&redirect_uri=${encodeURIComponent(redirectUri)}&duration=permanent&scope=${scopes.join(',')}`;

      res.json({ authUrl });
    } catch (error) {
      console.error('Reddit OAuth URL error:', error);
      res.status(500).json({ error: 'Failed to generate OAuth URL' });
    }
  }

  /**
   * Handle Reddit OAuth callback
   */
  static async handleRedditCallback(req: Request, res: Response): Promise<void> {
    try {
      const { code, state } = req.query;
      const { userId, clientId } = req.user!;

      if (!code || typeof code !== 'string') {
        res.status(400).json({ error: 'Authorization code is required' });
        return;
      }

      const clientId_reddit = process.env.REDDIT_CLIENT_ID;
      const clientSecret = process.env.REDDIT_CLIENT_SECRET;
      const redirectUri = process.env.REDDIT_REDIRECT_URI;

      if (!clientId_reddit || !clientSecret || !redirectUri) {
        res.status(500).json({ error: 'Reddit OAuth not configured' });
        return;
      }

      // Exchange code for tokens
      const tokenResponse = await axios.post('https://www.reddit.com/api/v1/access_token', 
        `grant_type=authorization_code&code=${code}&redirect_uri=${encodeURIComponent(redirectUri)}`,
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${Buffer.from(`${clientId_reddit}:${clientSecret}`).toString('base64')}`
          }
        }
      );

      const { access_token, refresh_token, expires_in } = tokenResponse.data;

      // Get Reddit user info
      const userResponse = await axios.get('https://oauth.reddit.com/api/v1/me', {
        headers: {
          'Authorization': `Bearer ${access_token}`,
          'User-Agent': 'RedditPostManager/1.0'
        }
      });

      const redditUsername = userResponse.data.name;
      const tokenExpiresAt = new Date(Date.now() + expires_in * 1000);

      // Encrypt tokens
      const encryptedAccessToken = encryptionService.encrypt(access_token);
      const encryptedRefreshToken = encryptionService.encrypt(refresh_token);

      // Check if Reddit account already exists for this client and username
      const existingAccount = await prisma.redditAccount.findFirst({
        where: {
          clientId,
          reddit_username: redditUsername
        }
      });

      if (existingAccount) {
        // Update existing account
        await prisma.redditAccount.update({
          where: { id: existingAccount.id },
          data: {
            access_token: encryptedAccessToken,
            refresh_token: encryptedRefreshToken,
            token_expires_at: tokenExpiresAt,
            updatedAt: new Date()
          }
        });
      } else {
        // Create new account
        await prisma.redditAccount.create({
          data: {
            reddit_username: redditUsername,
            access_token: encryptedAccessToken,
            refresh_token: encryptedRefreshToken,
            token_expires_at: tokenExpiresAt,
            clientId
          }
        });
      }

      res.json({
        message: 'Reddit account connected successfully',
        redditUsername
      });
    } catch (error) {
      console.error('Reddit OAuth callback error:', error);
      res.status(500).json({ error: 'Failed to connect Reddit account' });
    }
  }

  /**
   * List all Reddit accounts for the authenticated user's client
   */
  static async getRedditAccounts(req: Request, res: Response): Promise<void> {
    try {
      const { clientId } = req.user!;
      const accounts = await prisma.redditAccount.findMany({
        where: { clientId },
        select: {
          id: true,
          reddit_username: true,
          token_expires_at: true,
          createdAt: true,
          updatedAt: true
        }
      });
      res.json({ accounts });
    } catch (error) {
      console.error('Get Reddit accounts error:', error);
      res.status(500).json({ error: 'Failed to fetch Reddit accounts' });
    }
  }

  /**
   * Get current authenticated user info
   */
  static async me(req: Request, res: Response): Promise<void> {
    try {
      const { userId } = req.user!;
      const user = await prisma.user.findUnique({
        where: { id: userId },
        include: {
          client: { select: { id: true, name: true } }
        }
      });
      if (!user) {
        res.status(404).json({ error: 'User not found' });
        return;
      }
      res.json({
        user: {
          id: user.id,
          email: user.email,
          role: user.role,
          clientId: user.clientId,
          clientName: user.client.name
        }
      });
    } catch (error) {
      console.error('Get current user error:', error);
      res.status(500).json({ error: 'Failed to fetch user info' });
    }
  }
}
</file>

<file path="server/src/index.ts">
// server/src/index.ts

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';
import jwt, { JwtPayload } from 'jsonwebtoken';
import { prisma } from './utils/prisma';
import { SchedulerService } from './services/scheduler.service';
import { triggerMonitoringJob } from './services/monitoring.service'; // Import the monitoring service

// Import routes
import authRoutes from './routes/auth.routes';
import postRoutes from './routes/post.routes';
import aiRoutes from './routes/ai.routes';
import testRoutes from './routes/test.routes';
import keywordRoutes from './routes/keyword.routes';
import mentionRoutes from './routes/mention.routes';

// Load environment variables
dotenv.config();

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env.FRONTEND_URL || 'http://localhost:5173',
    credentials: true,
  },
});
export { io };

// Socket.io authentication middleware
io.use(async (socket: any, next: (err?: Error) => void) => {
  try {
    const token = socket.handshake.auth.token;
    if (!token) return next(new Error('Authentication error: token required'));
    const jwtSecret = process.env.JWT_SECRET;
    if (!jwtSecret) return next(new Error('JWT secret not configured'));
    const decoded = jwt.verify(token, jwtSecret) as JwtPayload;
    // Attach clientId to socket
    socket.clientId = decoded.clientId;
    socket.join(decoded.clientId);
    next();
  } catch (err) {
    next(new Error('Authentication error: invalid token'));
  }
});

io.on('connection', (socket: any) => {
  const clientId = socket.clientId;
  console.log(`Socket connected for clientId: ${clientId}`);
  socket.on('disconnect', () => {
    console.log(`Socket disconnected for clientId: ${clientId}`);
  });
});

const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors({
  origin: process.env.FRONTEND_URL || 'http://localhost:5173',
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/posts', postRoutes);
app.use('/api/ai', aiRoutes);
app.use('/api/test', testRoutes);
app.use('/api/keywords', keywordRoutes);
app.use('/api/mentions', mentionRoutes);

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: 'Route not found' });
});

// Global error handler
app.use((error: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Global error handler:', error);
  
  if (error.type === 'entity.parse.failed') {
    return res.status(400).json({ error: 'Invalid JSON payload' });
  }
  
  return res.status(500).json({ error: 'Internal server error' });
});

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully...');
  SchedulerService.stop();
  await prisma.$disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully...');
  SchedulerService.stop();
  await prisma.$disconnect();
  process.exit(0);
});

// Start server
async function startServer() {
  try {
    // Test database connection
    await prisma.$connect();
    console.log('✅ Database connected successfully');

    // Initialize scheduler for posts
    SchedulerService.initialize();
    
    // Start monitoring service job immediately on start in development for faster feedback
    if (process.env.NODE_ENV === 'development') {
      console.log('Running initial monitoring job in development mode...');
      // Use setImmediate to run it right after the current event loop finishes
      setImmediate(triggerMonitoringJob);
    }

    server.listen(PORT, () => {
      console.log(`🚀 Server running on port ${PORT}`);
      console.log(`📊 Health check: http://localhost:${PORT}/health`);
      console.log(`🔗 API Base URL: http://localhost:${PORT}/api`);
      console.log(`🔌 Socket.io running on port ${PORT}`);
    });
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

startServer();
</file>

<file path="server/src/routes/auth.routes.ts">
import { Router } from 'express';
import { AuthController } from '../controllers/auth.controller';
import { authenticateToken } from '../middleware/auth.middleware';

const router = Router();

/**
 * @route POST /api/auth/register
 * @desc Register a new user and client
 * @access Public
 */
router.post('/register', AuthController.register);

/**
 * @route POST /api/auth/login
 * @desc Login user
 * @access Public
 */
router.post('/login', AuthController.login);

/**
 * @route GET /api/auth/me
 * @desc Get current authenticated user info
 * @access Private
 */
router.get('/me', authenticateToken, AuthController.me);

/**
 * @route POST /api/auth/reddit/oauth/connect
 * @desc Get Reddit OAuth URL
 * @access Private
 */
router.post('/reddit/oauth/connect', authenticateToken, AuthController.getRedditOAuthUrl);

/**
 * @route GET /api/auth/reddit/oauth/callback
 * @desc Handle Reddit OAuth callback
 * @access Private
 */
router.get('/reddit/oauth/callback', authenticateToken, AuthController.handleRedditCallback);

/**
 * @route GET /api/reddit/accounts
 * @desc List all Reddit accounts for the authenticated user's client
 * @access Private
 */
router.get('/reddit/accounts', authenticateToken, AuthController.getRedditAccounts);

export default router;
</file>

<file path="server/src/services/monitoring.service.ts">
// server/src/services/monitoring.service.ts

import cron from 'node-cron';
import axios from 'axios';
import { prisma } from '../utils/prisma';
import { io } from '../index';

let isRunning = false;
let redditToken: string | null = null;
let redditTokenExpiry: number = 0;

const getRedditToken = async () => {
  const now = Date.now() / 1000;
  if (redditToken && redditTokenExpiry > now + 60) return redditToken;
  
  console.log('Refreshing Reddit API token...');
  const clientId = process.env.REDDIT_CLIENT_ID;
  const clientSecret = process.env.REDDIT_CLIENT_SECRET;
  
  if (!clientId || !clientSecret) {
    throw new Error('Reddit API credentials (REDDIT_CLIENT_ID, REDDIT_CLIENT_SECRET) are missing in .env file');
  }
  
  const auth = Buffer.from(`${clientId}:${clientSecret}`).toString('base64');
  const resp = await axios.post(
    'https://www.reddit.com/api/v1/access_token',
    'grant_type=client_credentials',
    { headers: { Authorization: `Basic ${auth}`, 'Content-Type': 'application/x-www-form-urlencoded' } }
  );
  
  redditToken = resp.data.access_token;
  redditTokenExpiry = now + resp.data.expires_in;
  console.log('Reddit API token refreshed successfully.');
  return redditToken;
};

const analyzeSentiment = (text: string): 'POSITIVE' | 'NEUTRAL' | 'NEGATIVE' | 'UNKNOWN' => {
  if (/good|great|awesome|love|amazing/i.test(text)) return 'POSITIVE';
  if (/bad|terrible|hate|awful|problem/i.test(text)) return 'NEGATIVE';
  if (text.trim() === '') return 'UNKNOWN';
  return 'NEUTRAL';
};

const delay = (ms: number) => new Promise(res => setTimeout(res, ms));

const runMonitoringJob = async () => {
  if (isRunning) {
    console.log('Monitoring job already in progress. Skipping.');
    return;
  }
  isRunning = true;
  console.log(`[${new Date().toISOString()}] Starting monitoring job...`);
  try {
    const token = await getRedditToken();
    const keywords = await prisma.keyword.findMany({ where: { is_active: true } });
    
    if (keywords.length === 0) {
      console.log('No active keywords to monitor.');
    }

    for (const keyword of keywords) {
      await delay(1200); // Respect Reddit rate limits
      
      const q = `"${keyword.term}"`;

      // --- DYNAMIC TIME WINDOW LOGIC ---
      // If the keyword has never been scanned, do a broad search (last month).
      // If it has been scanned, do a narrow search for recent mentions (last day).
      const timeWindow = keyword.lastScannedAt ? 'day' : 'month';
      const url = `https://oauth.reddit.com/search.json?sort=new&limit=100&q=${encodeURIComponent(q)}&t=${timeWindow}`;
      
      console.log(`[${keyword.term}] Searching URL (window: ${timeWindow}): ${url}`);
      
      const resp = await axios.get(url, { headers: { Authorization: `Bearer ${token}` } });
      const results = resp.data?.data?.children || [];
      
      if (results.length > 0) {
        console.log(`[${keyword.term}] Found ${results.length} results. Checking for new mentions...`);
      }

      let newMentionsFound = 0;
      for (const post of results) {
        const data = post.data;
        const source_url = `https://reddit.com${data.permalink}`;
        
        const exists = await prisma.mention.findUnique({ where: { source_url } });
        if (exists) continue;
        
        newMentionsFound++;
        const content = [data.title, data.selftext].filter(Boolean).join(' ');
        const sentiment = analyzeSentiment(content);
        
        const mention = await prisma.mention.create({
          data: {
            source_url,
            content_snippet: content.slice(0, 500),
            author: data.author,
            subreddit: data.subreddit,
            sentiment,
            found_at: new Date(data.created_utc * 1000),
            keywordId: keyword.id,
            clientId: keyword.clientId,
          },
        });
        
        console.log(`[${keyword.term}] New mention found and saved! Emitting to client ${mention.clientId}.`);
        io.to(mention.clientId).emit('new_mention', mention);
      }

      if (newMentionsFound > 0) {
        console.log(`[${keyword.term}] Finished processing. ${newMentionsFound} new mentions were saved.`);
      }
      
      // We always update lastScannedAt so the next run uses the narrow 'day' window.
      await prisma.keyword.update({ where: { id: keyword.id }, data: { lastScannedAt: new Date() } });
    }
  } catch (err: any) {
    console.error('--- MONITORING JOB FAILED ---');
    if (axios.isAxiosError(err)) {
        console.error('Axios Error:', {
            message: err.message,
            status: err.response?.status,
            statusText: err.response?.statusText,
            data: err.response?.data
        });
        if (err.response?.status === 401) {
            console.error('CRITICAL: Reddit API returned 401 Unauthorized. Check your credentials.');
        }
    } else {
        console.error('Non-Axios Error:', err.message, err.stack);
    }
    console.error('-----------------------------');
  } finally {
    isRunning = false;
    console.log(`[${new Date().toISOString()}] Monitoring job finished.`);
  }
};

cron.schedule('*/1 * * * *', runMonitoringJob);

export const triggerMonitoringJob = runMonitoringJob;
</file>

<file path="server/src/services/scheduler.service.ts">
import cron from 'node-cron';
import axios from 'axios';
import { prisma } from '../utils/prisma';
import { encryptionService } from './encryption.service';

/**
 * Service for scheduling and posting Reddit posts
 */
export class SchedulerService {
  private static isRunning = false;

  /**
   * Initialize the scheduler
   */
  static initialize(): void {
    if (this.isRunning) {
      console.log('Scheduler is already running');
      return;
    }

    // Run every minute
    cron.schedule('*/1 * * * *', async () => {
      await this.processScheduledPosts();
    });

    this.isRunning = true;
    console.log('Scheduler initialized - checking for scheduled posts every minute');
  }

  /**
   * Process all scheduled posts that are due
   */
  private static async processScheduledPosts(): Promise<void> {
    try {
      const now = new Date();

      // Find all scheduled posts that are due
      const scheduledPosts = await prisma.post.findMany({
        where: {
          status: 'Scheduled',
          scheduled_at: {
            lte: now
          }
        },
        include: {
          redditAccount: true
        }
      });

      console.log(`Found ${scheduledPosts.length} posts to process`);

      for (const post of scheduledPosts) {
        await this.processPost(post);
      }
    } catch (error) {
      console.error('Error processing scheduled posts:', error);
    }
  }

  /**
   * Process a single scheduled post
   */
  private static async processPost(post: any): Promise<void> {
    try {
      console.log(`Processing post: ${post.id} - ${post.title}`);

      // Check if post has a Reddit account
      if (!post.redditAccount) {
        await this.updatePostStatus(post.id, 'Error', 'No Reddit account associated with this post');
        return;
      }

      // Decrypt access token
      let accessToken: string;
      try {
        accessToken = encryptionService.decrypt(post.redditAccount.access_token);
      } catch (error) {
        console.error(`Failed to decrypt access token for post ${post.id}:`, error);
        await this.updatePostStatus(post.id, 'Error', 'Failed to decrypt access token');
        return;
      }

      // Check if token is expired and refresh if necessary
      if (new Date() >= post.redditAccount.token_expires_at) {
        console.log(`Token expired for post ${post.id}, refreshing...`);
        const refreshed = await this.refreshRedditToken(post.redditAccount.id);
        if (!refreshed) {
          await this.updatePostStatus(post.id, 'Error', 'Failed to refresh Reddit token');
          return;
        }
        // Get the refreshed token
        const updatedAccount = await prisma.redditAccount.findUnique({
          where: { id: post.redditAccount.id }
        });
        if (!updatedAccount) {
          await this.updatePostStatus(post.id, 'Error', 'Reddit account not found after refresh');
          return;
        }
        accessToken = encryptionService.decrypt(updatedAccount.access_token);
      }

      // Post to Reddit
      const submissionResult = await this.submitToReddit(post, accessToken);

      if (submissionResult.success) {
        await this.updatePostStatus(post.id, 'Posted', null, new Date());
        console.log(`Successfully posted to Reddit: ${post.id}`);
      } else {
        const errorMessage = submissionResult.error || 'Failed to submit to Reddit';
        await this.updatePostStatus(post.id, 'Error', errorMessage);
      }
    } catch (error) {
      console.error(`Error processing post ${post.id}:`, error);
      await this.updatePostStatus(post.id, 'Error', error instanceof Error ? error.message : 'Unknown error');
    }
  }

  /**
   * Refresh Reddit access token
   */
  private static async refreshRedditToken(redditAccountId: string): Promise<boolean> {
    try {
      const account = await prisma.redditAccount.findUnique({
        where: { id: redditAccountId }
      });

      if (!account) {
        return false;
      }

      // Decrypt refresh token
      const refreshToken = encryptionService.decrypt(account.refresh_token);

      const clientId = process.env.REDDIT_CLIENT_ID;
      const clientSecret = process.env.REDDIT_CLIENT_SECRET;

      if (!clientId || !clientSecret) {
        console.error('Reddit OAuth not configured');
        return false;
      }

      // Exchange refresh token for new access token
      const response = await axios.post('https://www.reddit.com/api/v1/access_token',
        `grant_type=refresh_token&refresh_token=${refreshToken}`,
        {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Basic ${Buffer.from(`${clientId}:${clientSecret}`).toString('base64')}`
          }
        }
      );

      const { access_token, refresh_token, expires_in } = response.data;

      // Encrypt new tokens
      const encryptedAccessToken = encryptionService.encrypt(access_token);
      const encryptedRefreshToken = encryptionService.encrypt(refresh_token);
      const tokenExpiresAt = new Date(Date.now() + expires_in * 1000);

      // Update account with new tokens
      await prisma.redditAccount.update({
        where: { id: redditAccountId },
        data: {
          access_token: encryptedAccessToken,
          refresh_token: encryptedRefreshToken,
          token_expires_at: tokenExpiresAt,
          updatedAt: new Date()
        }
      });

      console.log(`Successfully refreshed token for account ${redditAccountId}`);
      return true;
    } catch (error) {
      console.error('Failed to refresh Reddit token:', error);
      return false;
    }
  }

  /**
   * Submit post to Reddit
   */
  private static async submitToReddit(post: any, accessToken: string): Promise<{ success: boolean; error?: string }> {
    try {
        const response = await axios.post('https://oauth.reddit.com/api/submit',
            new URLSearchParams({
                sr: post.subreddit,
                title: post.title,
                text: post.body,
                kind: 'self',
                api_type: 'json' // Request a JSON response to be safe
            }), // No .toString() needed, Axios handles this
            {
                headers: {
                    'Authorization': `Bearer ${accessToken}`,
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'User-Agent': 'RedditPostManager/1.0'
                }
            }
        );

        // --- IMPROVED, SAFER LOGIC ---
        // Safely check the response structure.
        const redditResponse = response.data;

        if (redditResponse && redditResponse.json && redditResponse.json.errors && redditResponse.json.errors.length === 0) {
            // Success! Update post with the Reddit ID
            await prisma.post.update({
                where: { id: post.id },
                data: {
                    reddit_post_id: redditResponse.json.data.name
                }
            });
            return { success: true };
        } else if (redditResponse && redditResponse.json && redditResponse.json.errors) {
            // There are errors in the successful response.
            const errorMessage = redditResponse.json.errors.map((e: any) => `[${e[0]}] ${e[1]}`).join(', ');
            console.error(`Reddit API reported an error for post ${post.id}:`, errorMessage);
            return { success: false, error: errorMessage };
        } else {
            // The response was successful (2xx) but not in the expected format.
            console.error(`Unexpected response structure from Reddit for post ${post.id}:`, redditResponse);
            return { success: false, error: 'Received an unexpected response structure from Reddit.' };
        }

    } catch (error) {
        // --- IMPROVED LOGGING ---
        console.error(`!!! An exception occurred in submitToReddit for post ${post.id} !!!`);
        // Log the full error object to see its type and stack trace
        console.error(error); 
        
        if (axios.isAxiosError(error)) {
            const errorMessage = `Reddit API request failed: ${error.response?.status} - ${JSON.stringify(error.response?.data)}`;
            return { success: false, error: errorMessage };
        }
        
        // This will now capture the TypeError and give a more useful message
        const errorMessage = error instanceof Error ? error.message : 'An unknown internal error occurred.';
        return { success: false, error: `Internal Server Error: ${errorMessage}` };
    }
  }

  /**
   * Update post status
   */
  private static async updatePostStatus(
    postId: string,
    status: 'Posted' | 'Error',
    errorMessage?: string | null,
    postedAt?: Date
  ): Promise<void> {
    try {
      const updateData: any = {
        status,
        posted_at: postedAt || null
      };
      
      // Only include error_message if it's not undefined
      if (errorMessage !== undefined) {
        updateData.error_message = errorMessage;
      }

      await prisma.post.update({
        where: { id: postId },
        data: updateData
      });
    } catch (error) {
      console.error(`Failed to update post status for ${postId}:`, error);
    }
  }

  /**
   * Stop the scheduler
   */
  static stop(): void {
    this.isRunning = false;
    console.log('Scheduler stopped');
  }
}
</file>

<file path="client/src/app/keywords/page.tsx">
// client/src/app/keywords/page.tsx

"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/lib/auth';
import api from '@/lib/axios';
import { useRouter } from 'next/navigation';
import { useSocketContext } from '@/contexts/SocketContext';
import Link from 'next/link';
import ReactMarkdown from "react-markdown";

// --- Type Definitions (from Prisma Schema) ---
interface Keyword {
    id: string;
    term: string;
    createdAt: string;
}

interface Mention {
    id: string;
    source_url: string;
    content_snippet: string;
    author: string;
    subreddit: string;
    sentiment: 'POSITIVE' | 'NEUTRAL' | 'NEGATIVE' | 'UNKNOWN';
    found_at: string;
}

// --- Reusable Components ---

const SentimentBadge = ({ sentiment }: { sentiment: Mention['sentiment'] }) => {
    const styles = {
        POSITIVE: 'bg-green-100 text-green-800 border-green-200',
        NEGATIVE: 'bg-red-100 text-red-800 border-red-200',
        NEUTRAL: 'bg-blue-100 text-blue-800 border-blue-200',
        UNKNOWN: 'bg-slate-100 text-slate-800 border-slate-200',
    };
    return <span className={`px-2 py-0.5 text-xs font-semibold rounded-full border ${styles[sentiment]}`}>{sentiment}</span>;
}

const LoadingSpinner = () => (
    <div className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
            <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
            <div className="text-lg text-slate-600 font-medium">Loading...</div>
        </div>
    </div>
);

// --- Main Page Component ---

export default function KeywordsPage() {
    const { user, loading: authLoading } = useAuth();
    const router = useRouter();
    const { lastMention } = useSocketContext();

    const [keywords, setKeywords] = useState<Keyword[]>([]);
    const [mentions, setMentions] = useState<Mention[]>([]);
    const [newKeyword, setNewKeyword] = useState('');
    
    const [loading, setLoading] = useState(true);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [error, setError] = useState('');

    const fetchInitialData = useCallback(async () => {
        if (!user) return;
        setLoading(true);
        setError('');
        try {
            const [keywordsRes, mentionsRes]: [
                { data: Keyword[] },
                { data: { mentions: Mention[] } }
            ] = await Promise.all([
                api.get<Keyword[]>('/api/keywords'),
                api.get<{ mentions: Mention[] }>('/api/mentions?pageSize=20'),
            ]);
            setKeywords(keywordsRes.data);
            setMentions(mentionsRes.data.mentions);
        } catch {
            setError('Failed to load initial data. Please refresh the page.');
        } finally {
            setLoading(false);
        }
    }, [user]);

    useEffect(() => {
        if (!authLoading && !user) {
            router.replace('/login');
        } else if (user) {
            fetchInitialData();
        }
    }, [user, authLoading, router, fetchInitialData]);

    // Listen for new mentions from WebSocket
    useEffect(() => {
        if (lastMention && !mentions.some(m => m.id === lastMention.id)) {
            setMentions(prev => [lastMention, ...prev]);
        }
    }, [lastMention, mentions]);

    const handleAddKeyword = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!newKeyword.trim()) return;
        setIsSubmitting(true);
        setError('');

        try {
            const res = await api.post('/api/keywords', { term: newKeyword });
            const newKw = res.data as Keyword;
            setKeywords(prev => [newKw, ...prev].sort((a, b) => a.term.localeCompare(b.term)));
            setNewKeyword('');
        } catch (err: unknown) {
            if (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data) {
                setError((err.response.data as { error?: string }).error || 'Failed to add keyword.');
            } else {
                setError('Failed to add keyword.');
            }
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleDeleteKeyword = async (id: string) => {
        const originalKeywords = keywords;
        setKeywords(prev => prev.filter(k => k.id !== id));
        
        try {
            await api.delete(`/api/keywords/${id}`);
        } catch (err: unknown) {
            if (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data) {
                setError((err.response.data as { error?: string }).error || 'Failed to delete keyword.');
            } else {
                setError('Failed to delete keyword.');
            }
            setKeywords(originalKeywords); // Revert on error
        }
    };

    if (authLoading || !user) {
        return <LoadingSpinner />;
    }

    return (
        <main className="min-h-screen bg-slate-50">
            {/* Header - Dashboard style */}
            <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 md:pt-28">
                {/* Floating/blurred background shapes */}
                <div className="absolute left-1/2 top-8 -translate-x-1/2 w-[340px] h-[80px] bg-gradient-to-r from-[#FF4500]/20 via-[#FF6B35]/20 to-[#FFF7F0]/0 rounded-full blur-3xl opacity-60 pointer-events-none z-0"></div>
                <div className="absolute top-1/4 left-1/4 w-40 h-40 bg-gradient-to-br from-[#FF4500]/10 to-transparent rounded-full blur-2xl opacity-40 pointer-events-none z-0"></div>
                <div className="absolute bottom-0 right-1/4 w-64 h-64 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-30 pointer-events-none z-0"></div>
                <div className="relative z-10 flex flex-col items-center text-center">
                    {/* Badge */}
                    <div className="mb-4 inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 shadow-sm">
                        <span className="w-2 h-2 bg-yellow-500 rounded-full mr-2 animate-pulse"></span>
                        <span className="text-sm font-medium text-slate-700">Keyword Monitoring</span>
                    </div>
                    <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold leading-tight text-slate-900 mb-3 tracking-tight" style={{fontFamily: 'Plus Jakarta Sans'}}>
                        Real-time Reddit Monitoring
                    </h1>
                    <p className="text-slate-700 text-lg sm:text-xl font-medium mb-2" style={{fontFamily: 'Plus Jakarta Sans'}}>
                        Track brand mentions, competitors, and topics across Reddit in real time.
                    </p>
                </div>
            </div>

            <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-6">
                {error && <div className="mb-4 p-4 text-sm text-red-800 bg-red-100 border border-red-200 rounded-lg">{error}</div>}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
                    {/* Left Column: Keyword Management */}
                    <div className="lg:col-span-1 space-y-6">
                        <div className="bg-white rounded-2xl shadow-lg border border-slate-200 p-8">
                            <h2 className="text-lg font-semibold text-slate-900 mb-4">Add Keyword</h2>
                            <form onSubmit={handleAddKeyword} className="space-y-3">
                                <input
                                    type="text"
                                    value={newKeyword}
                                    onChange={e => setNewKeyword(e.target.value)}
                                    placeholder="e.g., 'customer service'"
                                    className="w-full px-4 py-2 rounded-lg border border-slate-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                                />
                                <button
                                    type="submit"
                                    disabled={isSubmitting || !newKeyword.trim()}
                                    className="w-full px-4 py-2 font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-slate-400 disabled:cursor-not-allowed flex items-center justify-center"
                                >
                                    {isSubmitting ? 'Adding...' : 'Add Keyword'}
                                </button>
                            </form>
                        </div>
                        <div className="bg-white rounded-2xl shadow-lg border border-slate-200 p-8">
                            <h2 className="text-lg font-semibold text-slate-900 mb-4">Tracked Keywords</h2>
                            {loading ? (
                                <p className="text-slate-500">Loading keywords...</p>
                            ) : keywords.length === 0 ? (
                                <p className="text-slate-500 text-sm">You are not tracking any keywords. Add one above to start.</p>
                            ) : (
                                <ul className="space-y-3">
                                    {keywords.map(kw => (
                                        <li key={kw.id} className="flex justify-between items-center bg-slate-50 p-3 rounded-lg border border-slate-200">
                                            <span className="font-medium text-slate-800">{kw.term}</span>
                                            <button 
                                                onClick={() => handleDeleteKeyword(kw.id)}
                                                className="text-slate-500 hover:text-red-600 p-1 rounded-full hover:bg-red-100 transition-colors"
                                                title={`Delete "${kw.term}"`}
                                            >
                                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                                            </button>
                                        </li>
                                    ))}
                                </ul>
                            )}
                        </div>
                    </div>
                    {/* Right Column: Mentions Feed */}
                    <div className="lg:col-span-2 bg-white rounded-2xl shadow-lg border border-slate-200">
                        <h2 className="text-lg font-semibold text-slate-900 p-8 border-b border-slate-200">Real-time Mentions</h2>
                        <div className="p-8 space-y-4 max-h-[80vh] overflow-y-auto">
                            {loading ? (
                                <p className="text-slate-500 text-center py-8">Loading mentions feed...</p>
                            ) : mentions.length === 0 ? (
                                <div className="text-center py-12 text-slate-500">
                                    <h3 className="text-lg font-semibold text-slate-800">No Mentions Yet</h3>
                                    <p className="mt-1">Once a tracked keyword is mentioned on Reddit, it will appear here in real-time.</p>
                                </div>
                            ) : (
                                mentions.map(mention => (
                                    <div key={mention.id} className="border border-slate-200 rounded-lg p-4 bg-slate-50/50 hover:bg-slate-50 transition-colors">
                                        <div className="flex justify-between items-start mb-2">
                                            <div className="flex items-center gap-3">
                                                <SentimentBadge sentiment={mention.sentiment} />
                                                <span className="text-sm font-medium text-slate-600">r/{mention.subreddit}</span>
                                            </div>
                                            <a href={mention.source_url} target="_blank" rel="noopener noreferrer" className="text-xs text-blue-600 hover:underline">
                                                View on Reddit ↗
                                            </a>
                                        </div>
                                        <div className="prose prose-slate my-2">
                                            <ReactMarkdown>{
                                                mention.content_snippet.length > 400
                                                    ? mention.content_snippet.slice(0, 400) + '...'
                                                    : mention.content_snippet
                                            }</ReactMarkdown>
                                        </div>
                                        <div className="text-xs text-slate-500 flex justify-between">
                                            <span>by u/{mention.author}</span>
                                            <span>{new Date(mention.found_at).toLocaleString()}</span>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>
                    </div>
                </div>
            </div>
        </main>
    );
}
</file>

<file path="client/src/app/reddit-connect/page.tsx">
"use client";
import React, { useState, useEffect, Suspense } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import api from "@/lib/axios";
import { useAuth } from "@/lib/auth";
import Link from "next/link";

// --- Improvement: Type-safe data model ---
interface RedditAccount {
  id: string;
  reddit_username: string;
}

// The main component logic
function RedditConnectContent() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();

  const [accounts, setAccounts] = useState<RedditAccount[]>([]);
  const [isConnecting, setIsConnecting] = useState(false);
  const [success, setSuccess] = useState("");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [callbackHandled, setCallbackHandled] = useState(false);

  // --- Effect 1: Handle User Authentication Guard ---
  useEffect(() => {
    if (!authLoading && !user) {
      router.replace("/login");
    }
  }, [user, authLoading, router]);

  // --- Effect 2: Fetch initial account status ---
  useEffect(() => {
    if (!user) return;
    setIsLoading(true);
    const fetchAccounts = async () => {
      try {
        const res = await api.get<{ accounts: RedditAccount[] }>("/api/auth/reddit/accounts");
        setAccounts(res.data.accounts);
      } catch (err: unknown) {
        setError(
          (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
            ? (err.response.data.error as string)
            : (err instanceof Error ? err.message : "Failed to fetch connection status. Please refresh.")
        );
      } finally {
        setIsLoading(false);
      }
    };
    fetchAccounts();
  }, [user, callbackHandled]); // Rerun when callback is handled to get new status

  // --- Effect 3: Handle the OAuth callback from Reddit ---
  useEffect(() => {
    if (!user || callbackHandled) return;
    const code = searchParams.get("code");
    const state = searchParams.get("state");

    if (code) {
      setCallbackHandled(true); // Prevent this from running multiple times
      setIsConnecting(true); // Show a "finalizing" state
      setError("");
      setSuccess("");

      const handleCallback = async () => {
        try {
          const res = await api.get<{ redditUsername: string }>(`/api/auth/reddit/oauth/callback?code=${code}&state=${state || ""}`);
          setSuccess(`Success! Connected as ${res.data.redditUsername}. Redirecting...`);
          // --- Improvement: Redirect to dashboard after success ---
          setTimeout(() => router.push("/dashboard"), 2000);
        } catch (err: unknown) {
          setError(
            (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
              ? (err.response.data.error as string)
              : (err instanceof Error ? err.message : "Failed to connect Reddit account.")
          );
        } finally {
          setIsConnecting(false);
        }
      };
      handleCallback();
    }
  }, [user, searchParams, callbackHandled, router]);


  const handleInitiateConnect = async () => {
    setIsConnecting(true);
    setError("");
    setSuccess("");
    try {
      const res = await api.post<{ authUrl: string }>("/api/auth/reddit/oauth/connect");
      window.location.href = res.data.authUrl; // Redirect user to Reddit
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "Could not initiate connection. Please try again.")
      );
      setIsConnecting(false);
    }
  };

  if (authLoading || isLoading) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          <div className="text-lg text-slate-600 font-medium">Loading Connection Status...</div>
        </div>
      </main>
    );
  }

  const isConnected = accounts.length > 0;
  const username = isConnected ? accounts[0].reddit_username : null;

  return (
    <main className="min-h-screen bg-slate-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 text-right">
             <Link href="/dashboard" className="text-sm font-semibold text-blue-600 hover:text-blue-700">
                Go to Dashboard →
            </Link>
        </div>
        <div className="flex items-center justify-center pt-16">
            <div className="w-full max-w-lg">
                <div className="text-center">
                    <h1 className="text-3xl font-bold text-slate-900">Reddit Account Connection</h1>
                    <p className="text-slate-600 mt-2">
                        To schedule and publish posts, you need to grant access to your Reddit account.
                    </p>
                </div>
                <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-8 mt-8">
                    {success && <div className="mb-4 p-3 text-sm text-green-800 bg-green-100 border border-green-200 rounded-lg">{success}</div>}
                    {error && <div className="mb-4 p-3 text-sm text-red-800 bg-red-100 border border-red-200 rounded-lg">{error}</div>}

                    {/* --- Improvement: Visual Status Box --- */}
                    <div className="bg-slate-50 border border-slate-200 rounded-lg p-4 flex items-center gap-4">
                        {isConnecting ? (
                            <>
                                <div className="w-5 h-5 border-2 border-slate-400 border-t-transparent rounded-full animate-spin"></div>
                                <div className="flex-1">
                                    <p className="font-semibold text-slate-800">Finalizing Connection</p>
                                    <p className="text-sm text-slate-600">Please wait a moment...</p>
                                </div>
                            </>
                        ) : isConnected ? (
                            <>
                                <div className="w-10 h-10 flex items-center justify-center bg-green-100 rounded-full">
                                    <span className="text-xl text-green-600">✓</span>
                                </div>
                                <div className="flex-1">
                                    <p className="font-semibold text-slate-800">Connected</p>
                                    <p className="text-sm text-slate-600">Authenticated as <strong>{username}</strong></p>
                                </div>
                            </>
                        ) : (
                            <>
                                <div className="w-10 h-10 flex items-center justify-center bg-slate-100 rounded-full">
                                    <span className="text-xl text-slate-500">!</span>
                                </div>
                                <div className="flex-1">
                                    <p className="font-semibold text-slate-800">Not Connected</p>
                                    <p className="text-sm text-slate-600">Please connect your account to proceed.</p>
                                </div>
                            </>
                        )}
                    </div>
                    <button
                        onClick={handleInitiateConnect}
                        disabled={isConnecting}
                        className="w-full flex justify-center items-center mt-6 px-4 py-2.5 font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-slate-400 transition-colors"
                    >
                        {isConnecting ? "Please wait..." : isConnected ? "Reconnect Account" : "Connect with Reddit"}
                    </button>
                </div>
            </div>
        </div>
    </main>
  );
}

// Using Suspense for client components that use searchParams
export default function RedditConnectPage() {
    return (
        <Suspense>
            <RedditConnectContent />
        </Suspense>
    );
}
</file>

<file path="server/package.json">
{
  "name": "server",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "dev": "nodemon --exec ts-node src/index.ts",
    "build": "tsc",
    "start": "node dist/index.js",
    "db:generate": "prisma generate",
    "db:push": "prisma db push",
    "db:migrate": "prisma migrate dev",
    "db:studio": "prisma studio",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "@langchain/google-genai": "^0.2.14",
    "@prisma/client": "^6.11.1",
    "@types/bcryptjs": "^2.4.6",
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node-cron": "^3.0.11",
    "axios": "^1.10.0",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^17.2.0",
    "express": "^5.1.0",
    "jsonwebtoken": "^9.0.2",
    "langchain": "^0.3.29",
    "node-cron": "^4.2.1",
    "nodemon": "^3.1.10",
    "openai": "^5.9.0",
    "prisma": "^6.11.1",
    "socket.io": "^4.8.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  },
  "description": "",
  "devDependencies": {
    "@types/socket.io": "^3.0.1"
  }
}
</file>

<file path="client/src/app/login/page.tsx">
"use client";
import React, { useState, useEffect, Suspense } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/lib/auth";
import api from "@/lib/axios";
import Link from "next/link";

function LoginContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { user, loading, login: authLogin } = useAuth();
  
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  // --- Effect 1: Redirect authenticated users ---
  useEffect(() => {
    if (!loading && user) {
      router.replace("/dashboard");
    }
  }, [user, loading, router]);
  
  // --- Improvement: Show success message after registration ---
  useEffect(() => {
    if (searchParams.get('registered') === 'true') {
        setSuccessMessage('Registration successful! Please log in to continue.');
        // Clean the URL to prevent the message from showing on refresh
        router.replace('/login', { scroll: false });
    }
  }, [searchParams, router]);


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsSubmitting(true);
    try {
      const { data } = await api.post<{ token: string }>("/api/auth/login", { email, password });
      // The authLogin function should handle setting the token and user state
      await authLogin(data.token);
      router.push("/dashboard");
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "Invalid email or password.")
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  // Show a loading spinner while checking auth status
  if (loading || user) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
      </main>
    );
  }

  return (
    // --- Improvement: Consistent layout and background ---
    <main className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-slate-900">Welcome Back</h1>
            <p className="text-slate-600 mt-2">Sign in to continue to your dashboard.</p>
        </div>

        {/* --- Improvement: Professional card styling --- */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-8">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {successMessage && (
                <div className="p-3 text-sm text-green-800 bg-green-100 border border-green-200 rounded-lg">
                    {successMessage}
                </div>
            )}
            {error && (
              <div className="p-3 text-sm text-red-800 bg-red-100 border border-red-200 rounded-lg">
                {error}
              </div>
            )}
            
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                placeholder="you@company.com"
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={email}
                onChange={e => setEmail(e.target.value)}
                required
              />
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-slate-700 mb-1">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                placeholder="Your password"
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={password}
                onChange={e => setPassword(e.target.value)}
                required
              />
            </div>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full flex justify-center items-center px-4 py-2.5 font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-slate-400 transition-colors"
            >
              {isSubmitting && <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
              {isSubmitting ? "Signing In..." : "Sign In"}
            </button>
          </form>
        </div>
        
        <div className="text-center text-sm text-slate-600 mt-6">
          Don't have an account?{' '}
          <Link href="/register" className="font-semibold text-blue-600 hover:text-blue-700">
            Create one
          </Link>
        </div>
      </div>
    </main>
  );
}

// Using Suspense for client components that use searchParams
export default function LoginPage() {
    return (
        <Suspense>
            <LoginContent />
        </Suspense>
    );
}
</file>

<file path="client/src/app/posts/new/page.tsx">
"use client";
import React, { useState, useEffect, Suspense } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/lib/auth";
import api from "@/lib/axios";
import Link from "next/link";

function NewPostPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams(); // Hook to read URL query params

  const [form, setForm] = useState({
    title: "",
    body: "",
    subreddit: "",
    scheduledAt: "",
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    if (!authLoading && !user) {
      router.replace("/login");
    }
  }, [user, authLoading, router]);

  // --- Improvement: Pre-fill form from URL query params (from AI page) ---
  useEffect(() => {
    const titleFromQuery = searchParams.get("title");
    const bodyFromQuery = searchParams.get("body");
    if (titleFromQuery || bodyFromQuery) {
      setForm((f) => ({
        ...f,
        title: decodeURIComponent(titleFromQuery || ""),
        body: decodeURIComponent(bodyFromQuery || ""),
      }));
    }
  }, [searchParams]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setForm((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setIsSubmitting(true);
    try {
      const payload = {
        title: form.title,
        body: form.body,
        subreddit: form.subreddit,
        // Conditionally add scheduled_at if it exists
        ...(form.scheduledAt
          ? { scheduled_at: new Date(form.scheduledAt).toISOString() }
          : {}),
      };
      await api.post("/api/posts", payload);
      setSuccess("Post created successfully! Redirecting...");
      setTimeout(() => router.push("/posts"), 1500);
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "Failed to create post")
      );
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // --- Improvement: Consistent loading state ---
  if (authLoading || !user) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          <div className="text-lg text-slate-600 font-medium">Loading...</div>
        </div>
      </main>
    );
  }

  return (
    // --- Improvement: Consistent page structure ---
    <main className="min-h-screen bg-slate-50">
      {/* Header - Dashboard style */}
      <div className="relative max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 md:pt-28">
        {/* Floating/blurred background shapes */}
        <div className="absolute left-1/2 top-8 -translate-x-1/2 w-[340px] h-[80px] bg-gradient-to-r from-[#FF4500]/20 via-[#FF6B35]/20 to-[#FFF7F0]/0 rounded-full blur-3xl opacity-60 pointer-events-none z-0"></div>
        <div className="absolute top-1/4 left-1/4 w-40 h-40 bg-gradient-to-br from-[#FF4500]/10 to-transparent rounded-full blur-2xl opacity-40 pointer-events-none z-0"></div>
        <div className="absolute bottom-0 right-1/4 w-64 h-64 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-30 pointer-events-none z-0"></div>
        <div className="relative z-10 flex flex-col items-center text-center">
          {/* Badge */}
          <div className="mb-4 inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 shadow-sm">
            <span className="w-2 h-2 bg-blue-500 rounded-full mr-2 animate-pulse"></span>
            <span className="text-sm font-medium text-slate-700">Create New Post</span>
          </div>
          <h1 className="text-4xl sm:text-5xl font-extrabold leading-tight text-slate-900 mb-3 tracking-tight" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Compose Your Post
          </h1>
          <p className="text-slate-700 text-lg sm:text-xl font-medium mb-2" style={{fontFamily: 'Plus Jakarta Sans'}}>
            All new posts are saved as drafts. You can schedule them from your posts dashboard.
          </p>
        </div>
      </div>

      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-6">
        {/* Alerts for success and error messages */}
        {success && <div className="mb-4 p-4 text-sm text-green-800 bg-green-100 border border-green-200 rounded-lg">{success}</div>}
        {error && <div className="mb-4 p-4 text-sm text-red-800 bg-red-100 border border-red-200 rounded-lg">{error}</div>}
        <form
          onSubmit={handleSubmit}
          className="bg-white rounded-2xl shadow-lg border border-slate-200"
        >
          <div className="p-8 space-y-6">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-slate-700 mb-1">
                Title
              </label>
              <input
                id="title"
                name="title"
                type="text"
                placeholder="An interesting title for your post"
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={form.title}
                onChange={handleChange}
                required
              />
            </div>

            <div>
              <label htmlFor="body" className="block text-sm font-medium text-slate-700 mb-1">
                Body
              </label>
              <textarea
                id="body"
                name="body"
                placeholder="Write your post content here. Markdown is supported."
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[250px]"
                value={form.body}
                onChange={handleChange}
                required
              />
            </div>

            <div>
              <label htmlFor="subreddit" className="block text-sm font-medium text-slate-700 mb-1">
                Subreddit
              </label>
              <input
                id="subreddit"
                name="subreddit"
                type="text"
                placeholder="e.g., programming"
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={form.subreddit}
                onChange={handleChange}
                required
              />
            </div>
          </div>
          <div className="p-4 bg-slate-50 border-t border-slate-200 flex justify-end gap-3">
            <Link href="/posts" className="px-4 py-2 text-sm font-semibold text-slate-700 bg-white border border-slate-300 rounded-lg hover:bg-slate-50">
                Cancel
            </Link>
            <button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-slate-400 flex items-center"
            >
              {isSubmitting && <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
              {isSubmitting ? "Creating..." : "Create Post"}
            </button>
          </div>
        </form>
      </div>
    </main>
  );
}

export default function NewPostPageWithSuspense() {
  return (
    <Suspense>
      <NewPostPage />
    </Suspense>
  );
}
</file>

<file path="client/src/app/posts/page.tsx">
"use client";
import React, { useEffect, useState, Suspense } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { useAuth } from "@/lib/auth";
import api from "@/lib/axios";
import Link from "next/link";

// --- Improvement: Type-safe data models ---
type PostStatus = "Draft" | "Scheduled" | "Posted" | "Error";

interface Post {
  id: string;
  title: string;
  subreddit: string;
  status: PostStatus;
  scheduled_at?: string;
}

interface RedditAccount {
  id: string;
  reddit_username: string;
}

// --- Improvement: Reusable Status Badge Component ---
const StatusBadge = ({ status }: { status: PostStatus }) => {
  const statusStyles: Record<PostStatus, string> = {
    Draft: "bg-slate-100 text-slate-800",
    Scheduled: "bg-yellow-100 text-yellow-800",
    Posted: "bg-green-100 text-green-800",
    Error: "bg-red-100 text-red-800",
  };
  return (
    <span
      className={`px-2.5 py-0.5 text-xs font-semibold rounded-full ${statusStyles[status]}`}
    >
      {status}
    </span>
  );
};

// --- Main Page Component ---
function PostsPageContent() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const searchParams = useSearchParams();

  const [accounts, setAccounts] = useState<RedditAccount[] | null>(null);
  const [posts, setPosts] = useState<Post[]>([]);
  
  const [page, setPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [status, setStatus] = useState("All");

  const [loading, setLoading] = useState(true);
  const [successMessage, setSuccessMessage] = useState("");

  const statusOptions = ["All", "Draft", "Scheduled", "Posted", "Error"];

  useEffect(() => {
    if (!authLoading && !user) {
      router.replace("/login");
    }
  }, [user, authLoading, router]);

  // Check for success message from query params
  useEffect(() => {
    if (searchParams.get("deleted") === "true") {
      setSuccessMessage("Post deleted successfully.");
      // Clean up URL
      router.replace("/posts", { scroll: false });
    }
  }, [searchParams, router]);

  // This effect now combines account fetching and the initial post fetch.
  useEffect(() => {
    if (!user) return;
    
    const fetchData = async () => {
      setLoading(true);
      try {
        // First, check for connected Reddit accounts
        const accountsRes = await api.get<{ accounts: RedditAccount[] }>("/api/auth/reddit/accounts");
        if (accountsRes.data.accounts.length === 0) {
          router.replace("/reddit-connect");
          return;
        }
        setAccounts(accountsRes.data.accounts);

        // Then, fetch posts
        const postsRes = await api.get("/api/posts", {
          params: { page, limit: 10, ...(status !== "All" && { status }) },
        });
        const responseData = postsRes.data as { posts: Post[]; pagination: { pages: number } };
        setPosts(responseData.posts);
        setTotalPages(responseData.pagination.pages);

      } catch (error) {
        console.error("Failed to fetch data:", error);
        setPosts([]); // Clear posts on error
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [user, page, status, router]);


  if (authLoading || accounts === null) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          <div className="text-lg text-slate-600 font-medium">Loading...</div>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-slate-50">
      {/* Header - Dashboard style */}
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 md:pt-28">
        {/* Floating/blurred background shapes */}
        <div className="absolute left-1/2 top-8 -translate-x-1/2 w-[340px] h-[80px] bg-gradient-to-r from-[#FF4500]/20 via-[#FF6B35]/20 to-[#FFF7F0]/0 rounded-full blur-3xl opacity-60 pointer-events-none z-0"></div>
        <div className="absolute top-1/4 left-1/4 w-40 h-40 bg-gradient-to-br from-[#FF4500]/10 to-transparent rounded-full blur-2xl opacity-40 pointer-events-none z-0"></div>
        <div className="absolute bottom-0 right-1/4 w-64 h-64 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-30 pointer-events-none z-0"></div>
        <div className="relative z-10 flex flex-col items-center text-center">
          {/* Badge */}
          <div className="mb-4 inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 shadow-sm">
            <span className="w-2 h-2 bg-blue-500 rounded-full mr-2 animate-pulse"></span>
            <span className="text-sm font-medium text-slate-700">Your Posts</span>
          </div>
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold leading-tight text-slate-900 mb-3 tracking-tight" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Manage & Schedule Posts
          </h1>
          <p className="text-slate-700 text-lg sm:text-xl font-medium mb-2" style={{fontFamily: 'Plus Jakarta Sans'}}>
            All your Reddit content in one place
          </p>
          <Link href="/posts/new" className="mt-4 px-6 py-3 text-base font-semibold text-white bg-blue-600 rounded-xl shadow-lg hover:bg-blue-700 transition-all">
            + New Post
          </Link>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-6">
        {successMessage && <div className="mb-4 p-4 text-sm text-green-800 bg-green-100 border border-green-200 rounded-lg">{successMessage}</div>}
        <div className="bg-white rounded-2xl shadow-lg border border-slate-200 overflow-hidden">
          {/* Filter Bar */}
          <div className="p-4 border-b border-slate-200 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center gap-4">
              <label htmlFor="status-filter" className="text-sm font-medium text-slate-700">Filter by status:</label>
              <select
                id="status-filter"
                className="px-3 py-1.5 text-sm rounded-lg border border-slate-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={status}
                onChange={e => { setStatus(e.target.value); setPage(1); }}
              >
                {statusOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}
              </select>
            </div>
            <div className="flex-1 flex justify-end">
              <Link href="/posts/new" className="hidden sm:inline-block px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 transition-colors">
                + New Post
              </Link>
            </div>
          </div>
          {/* Table */}
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-slate-200">
              <thead className="bg-slate-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">Title</th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">Subreddit</th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">Status</th>
                  <th className="px-6 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">Scheduled</th>
                  <th className="px-6 py-3 text-right text-xs font-semibold text-slate-600 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-slate-200">
                {loading ? (
                  <tr><td colSpan={5} className="text-center py-12 text-slate-500">Loading posts...</td></tr>
                ) : posts.length === 0 ? (
                  <tr>
                    <td colSpan={5} className="text-center py-12">
                      <h3 className="text-lg font-semibold text-slate-800">No Posts Found</h3>
                      <p className="text-slate-500 mt-1">Try a different filter or create a new post.</p>
                      <Link href="/posts/new" className="mt-4 inline-block px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700">Create your first post</Link>
                    </td>
                  </tr>
                ) : posts.map(post => (
                  <tr key={post.id}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 max-w-xs truncate">{post.title}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">r/{post.subreddit}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm"><StatusBadge status={post.status} /></td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">{post.scheduled_at ? new Date(post.scheduled_at).toLocaleString() : '—'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-right">
                      <Link href={`/posts/${post.id}`} className="px-3 py-1.5 text-sm font-semibold text-white bg-blue-600 rounded-md hover:bg-blue-700">View</Link>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          {/* Pagination */}
          {posts.length > 0 && (
            <div className="p-4 border-t border-slate-200 flex flex-col sm:flex-row justify-between items-center text-sm gap-2">
                <button
                    onClick={() => setPage(p => Math.max(1, p - 1))}
                    disabled={page === 1 || loading}
                    className="px-3 py-1.5 font-semibold text-slate-700 bg-white border border-slate-300 rounded-lg hover:bg-slate-50 disabled:opacity-50"
                >
                    Previous
                </button>
                <span className="text-slate-700 font-medium">Page {page} of {totalPages}</span>
                <button
                    onClick={() => setPage(p => Math.min(totalPages, p + 1))}
                    disabled={page === totalPages || loading}
                    className="px-3 py-1.5 font-semibold text-slate-700 bg-white border border-slate-300 rounded-lg hover:bg-slate-50 disabled:opacity-50"
                >
                    Next
                </button>
            </div>
          )}
        </div>
      </div>
    </main>
  );
}

// Using Suspense for client components that use searchParams
export default function PostsPage() {
    return (
        <Suspense fallback={<div>Loading...</div>}>
            <PostsPageContent />
        </Suspense>
    );
}
</file>

<file path="client/src/app/register/page.tsx">
"use client";
import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import api from "@/lib/axios";
import { useAuth } from "@/lib/auth";
import Link from "next/link";

export default function RegisterPage() {
  const router = useRouter();
  const { user, loading } = useAuth();
  
  const [form, setForm] = useState({
    email: "",
    password: "",
    clientName: "",
  });
  const [error, setError] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);

  useEffect(() => {
    // Redirect to dashboard if the user is already logged in
    if (!loading && user) {
      router.replace("/dashboard");
    }
  }, [user, loading, router]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setForm(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setIsSubmitting(true);
    try {
      await api.post("/api/auth/register", form);
      // --- Improvement: Redirect with a query param for a better user experience on the login page ---
      router.push("/login?registered=true");
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "An unknown error occurred during registration.")
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  // Prevents flash of content while checking auth status
  if (loading || user) {
     return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
      </main>
    );
  }

  return (
    // --- Improvement: Consistent layout and background ---
    <main className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
            {/* You can place your logo here */}
            <h1 className="text-3xl font-bold text-slate-900">Create Your Account</h1>
            <p className="text-slate-600 mt-2">Start managing your Reddit presence with ease.</p>
        </div>

        {/* --- Improvement: Professional card styling --- */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-8">
          <form className="space-y-6" onSubmit={handleSubmit}>
            {error && (
              <div className="p-3 text-sm text-red-800 bg-red-100 border border-red-200 rounded-lg">
                {error}
              </div>
            )}
            
            <div>
              <label htmlFor="clientName" className="block text-sm font-medium text-slate-700 mb-1">
                Company Name
              </label>
              <input
                id="clientName"
                name="clientName"
                type="text"
                placeholder="Your Company Inc."
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={form.clientName}
                onChange={handleChange}
                required
              />
            </div>
            
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-slate-700 mb-1">
                Email Address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                placeholder="you@company.com"
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={form.email}
                onChange={handleChange}
                required
              />
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-slate-700 mb-1">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="new-password"
                placeholder="6+ characters"
                className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                value={form.password}
                onChange={handleChange}
                required
                minLength={6}
              />
            </div>
            
            <button
              type="submit"
              disabled={isSubmitting}
              className="w-full flex justify-center items-center px-4 py-2.5 font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-slate-400 transition-colors"
            >
              {isSubmitting && <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
              {isSubmitting ? "Creating Account..." : "Create Account"}
            </button>
          </form>
        </div>
        
        <div className="text-center text-sm text-slate-600 mt-6">
          Already have an account?{' '}
          <Link href="/login" className="font-semibold text-blue-600 hover:text-blue-700">
            Sign in
          </Link>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="client/package.json">
{
  "name": "nextjs-tailwind",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev -H 0.0.0.0 -p 5173 --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "bunx tsc --noEmit && next lint",
    "format": "bunx biome format --write"
  },
  "dependencies": {
    "@types/axios": "^0.9.36",
    "axios": "^1.10.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dayjs": "^1.11.13",
    "lucide-react": "^0.475.0",
    "next": "^15.3.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-markdown": "^10.1.0",
    "same-runtime": "^0.0.1",
    "socket.io-client": "^4.8.1",
    "tailwind-merge": "^3.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@biomejs/biome": "1.9.4",
    "@eslint/eslintrc": "^3.3.1",
    "@types/node": "^20.17.50",
    "@types/react": "^18.3.22",
    "@types/react-dom": "^18.3.7",
    "eslint": "^9.27.0",
    "eslint-config-next": "15.1.7",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3"
  }
}
</file>

<file path="client/src/app/ai/page.tsx">
"use client";
import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/lib/auth";
import api from "@/lib/axios";
import ReactMarkdown from "react-markdown";

// --- Improvement: Type-safe data model based on your API docs ---
interface AITone {
  value: string;
  label: string;
  description: string;
}

export default function AIPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();

  const [keywords, setKeywords] = useState("");
  const [tone, setTone] = useState("");
  const [tones, setTones] = useState<AITone[]>([]);
  const [generating, setGenerating] = useState(false);
  const [result, setResult] = useState<{ title: string; body: string } | null>(
    null
  );
  const [error, setError] = useState("");
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    if (!authLoading && !user) {
      router.replace("/login");
    }
  }, [user, authLoading, router]);

  useEffect(() => {
    if (!user) return;
    const fetchTones = async () => {
      try {
        const res = await api.get<{ tones: AITone[] }>("/api/ai/tones");
        setTones(res.data.tones);
        // Set a default tone if available
        if (res.data.tones.length > 0) {
          setTone(res.data.tones[0].value);
        }
      } catch {
        setError("Could not load AI tones. Please try again later.");
        setTones([]);
      }
    };
    fetchTones();
  }, [user]);

  const handleGenerate = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!keywords || !tone) {
      setError("Please enter keywords and select a tone.");
      return;
    }
    setError("");
    setResult(null);
    setGenerating(true);
    try {
      const res = await api.post<{ title: string; body: string }>("/api/ai/draft", { keywords, tone });
      setResult({ title: res.data.title, body: res.data.body });
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "An unknown error occurred") ||
            "An unknown error occurred."
      );
    } finally {
      setGenerating(false);
    }
  };

  const handleCopy = () => {
    if (!result) return;
    navigator.clipboard.writeText(`${result.title}\n\n${result.body}`);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handleUseInNewPost = () => {
    if (!result) return;
    // Use query params to pre-fill the new post form
    router.push(
      `/posts/new?title=${encodeURIComponent(
        result.title
      )}&body=${encodeURIComponent(result.body)}`
    );
  };

  // --- Improvement: Consistent loading state with the dashboard ---
  if (authLoading || !user) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          <div className="text-lg text-slate-600 font-medium">Loading AI Generator...</div>
        </div>
      </main>
    );
  }

  return (
    // --- Improvement: Consistent page structure with dashboard ---
    <main className="min-h-screen bg-slate-50">
      {/* Header - Dashboard style */}
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 md:pt-28">
        {/* Floating/blurred background shapes */}
        <div className="absolute left-1/2 top-8 -translate-x-1/2 w-[340px] h-[80px] bg-gradient-to-r from-[#FF4500]/20 via-[#FF6B35]/20 to-[#FFF7F0]/0 rounded-full blur-3xl opacity-60 pointer-events-none z-0"></div>
        <div className="absolute top-1/4 left-1/4 w-40 h-40 bg-gradient-to-br from-[#FF4500]/10 to-transparent rounded-full blur-2xl opacity-40 pointer-events-none z-0"></div>
        <div className="absolute bottom-0 right-1/4 w-64 h-64 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-30 pointer-events-none z-0"></div>
        <div className="relative z-10 flex flex-col items-center text-center">
          {/* Badge */}
          <div className="mb-4 inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 shadow-sm">
            <span className="w-2 h-2 bg-purple-500 rounded-full mr-2 animate-pulse"></span>
            <span className="text-sm font-medium text-slate-700">AI Content Generator</span>
          </div>
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold leading-tight text-slate-900 mb-3 tracking-tight" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Generate Reddit Content with AI
          </h1>
          <p className="text-slate-700 text-lg sm:text-xl font-medium mb-2" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Instantly create high-quality post ideas and drafts
          </p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-6">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 items-start">
          {/* Form Card */}
          <div className="bg-white rounded-2xl shadow-lg border border-slate-200 p-8">
            <h2 className="text-xl font-semibold text-slate-900 mb-4">
              1. Enter Your Idea
            </h2>
            <form className="space-y-4" onSubmit={handleGenerate}>
              <div>
                <label htmlFor="keywords" className="block text-sm font-medium text-slate-700 mb-1">
                  Keywords
                </label>
                <input
                  id="keywords"
                  type="text"
                  placeholder="e.g., productivity hacks for developers"
                  className="w-full px-4 py-2 rounded-lg border border-slate-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  value={keywords}
                  onChange={(e) => setKeywords(e.target.value)}
                  required
                />
              </div>
              <div>
                <label htmlFor="tone" className="block text-sm font-medium text-slate-700 mb-1">
                  Tone of Voice
                </label>
                <select
                  id="tone"
                  className="w-full px-4 py-2 rounded-lg border border-slate-300 bg-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  value={tone}
                  onChange={(e) => setTone(e.target.value)}
                  required
                >
                  <option value="" disabled>Select a tone</option>
                  {tones.map((t) => (
                    <option key={t.value} value={t.value}>
                      {t.label}
                    </option>
                  ))}
                </select>
              </div>

              <button
                type="submit"
                className="w-full bg-blue-600 text-white font-semibold rounded-lg px-4 py-2.5 hover:bg-blue-700 transition-colors disabled:bg-slate-400 disabled:cursor-not-allowed flex items-center justify-center"
                disabled={generating}
              >
                {generating && <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
                {generating ? "Generating..." : "Generate Content"}
              </button>
              {error && (
                <div className="text-red-600 text-sm text-center font-medium p-3 bg-red-50 rounded-lg border border-red-200">
                  {error}
                </div>
              )}
            </form>
          </div>

          {/* Result Card */}
          <div className="bg-white rounded-2xl shadow-lg border border-slate-200 p-8">
            <h2 className="text-xl font-semibold text-slate-900 mb-4">
              2. Review Your Draft
            </h2>
            {generating ? (
                <div className="flex flex-col items-center justify-center h-64 text-slate-500">
                    <span className="text-4xl mb-4">🤖</span>
                    <p className="font-semibold">Our AI is writing...</p>
                    <p className="text-sm">This may take a few moments.</p>
                </div>
            ) : result ? (
              <div className="space-y-6">
                <div>
                  <h3 className="text-sm font-medium text-slate-600">TITLE</h3>
                  <p className="text-lg font-semibold text-slate-900 mt-1">
                    {result.title}
                  </p>
                </div>
                <div>
                  <h3 className="text-sm font-medium text-slate-600">BODY</h3>
                  <div className="text-slate-800 mt-1 prose prose-slate max-w-none">
                    <ReactMarkdown>{result.body}</ReactMarkdown>
                  </div>
                </div>
                <div className="flex flex-col sm:flex-row gap-3 mt-4">
                  <button
                    onClick={handleCopy}
                    className="flex-1 px-4 py-2 rounded-lg font-semibold bg-slate-100 text-slate-800 hover:bg-slate-200 border border-slate-200 transition-colors"
                  >
                    {copied ? "Copied!" : "Copy to Clipboard"}
                  </button>
                  <button
                    onClick={handleUseInNewPost}
                    className="flex-1 px-4 py-2 rounded-lg font-semibold bg-blue-600 text-white hover:bg-blue-700 border border-blue-600 transition-colors"
                  >
                    Use in New Post
                  </button>
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-64 text-slate-400">
                <span className="text-4xl mb-4">📝</span>
                <p className="font-semibold">No draft generated yet.</p>
                <p className="text-sm">Enter keywords and select a tone to get started.</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="client/src/app/globals.css">
@import url('./plus-jakarta-sans.css');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 5.9% 10%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --reddit-orange: 16 100% 50%;
    --reddit-orange-light: 22 100% 60%;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  html, body {
    font-family: 'Plus Jakarta Sans', ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', sans-serif;
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  .animate-fade-slide {
    animation: fadeSlideIn 1.2s cubic-bezier(0.4,0,0.2,1) both;
  }
  @keyframes fadeSlideIn {
    0% {
      opacity: 0;
      transform: translateY(40px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Bento grid animations */
  .bento-card {
    transform: translateY(0);
    transition: transform 0.3s ease-out, box-shadow 0.3s ease-out;
    opacity: 0;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    will-change: transform, box-shadow;
  }

  .bento-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 24px rgba(0, 0, 0, 0.08);
  }

  /* Animation delay for staggered entrance */
  .bento-card:nth-child(1) { animation: bentoFadeIn 0.5s 0.1s forwards ease-out; }
  .bento-card:nth-child(2) { animation: bentoFadeIn 0.5s 0.15s forwards ease-out; }
  .bento-card:nth-child(3) { animation: bentoFadeIn 0.5s 0.2s forwards ease-out; }
  .bento-card:nth-child(4) { animation: bentoFadeIn 0.5s 0.25s forwards ease-out; }
  .bento-card:nth-child(5) { animation: bentoFadeIn 0.5s 0.3s forwards ease-out; }
  .bento-card:nth-child(6) { animation: bentoFadeIn 0.5s 0.35s forwards ease-out; }

  @keyframes bentoFadeIn {
    0% {
      opacity: 0;
      transform: translateY(20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Subtle hover effects for bento card elements */
  .bento-card .bento-icon {
    transition: transform 0.2s ease;
  }
  
  .bento-card:hover .bento-icon {
    transform: translateY(-3px);
  }

  .bento-card .bento-title {
    transition: color 0.2s ease;
  }

  .bento-card .bento-badge {
    transition: all 0.2s ease;
  }
  
  .bento-card:hover .bento-badge {
    background-color: rgba(255, 69, 0, 0.15);
  }

  .bento-card .bento-btn {
    transition: all 0.2s ease;
    transform: translateY(0);
  }
  
  .bento-card:hover .bento-btn {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
  }

  /* Shine effect for bento cards */
  .bento-shine {
    position: relative;
    overflow: hidden;
  }
  
  .bento-shine::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.03) 100%
    );
    transform: rotate(30deg);
    transition: transform 0.5s ease-out;
    pointer-events: none;
  }
  
  .bento-shine:hover::after {
    transform: rotate(30deg) translate(5%, 5%);
  }
}
</file>

<file path="client/src/app/Navbar.tsx">
// client/src/app/Navbar.tsx

"use client";
import React from "react";
import Link from "next/link";
import { useAuth } from "@/lib/auth";
import { usePathname } from "next/navigation";

function UserMenu() {
  const { user, logout } = useAuth();
  const [open, setOpen] = React.useState(false);
  if (!user) return null;
  return (
    <div className="relative">
      <button
        className="flex items-center gap-2 px-4 py-1.5 bg-slate-50 rounded-md font-medium text-slate-700 hover:bg-slate-100 transition-colors"
        onClick={() => setOpen((o) => !o)}
      >
        <span className="truncate max-w-[120px]">{user.clientName || user.email}</span>
        <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" d="M19 9l-7 7-7-7" /></svg>
      </button>
      {open && (
        <div className="absolute right-0 mt-1 w-40 bg-white border border-slate-200 rounded-md shadow-lg z-50">
          <button
            className="w-full text-left px-4 py-2 text-slate-700 hover:bg-slate-50 transition-colors"
            onClick={() => { logout(); window.location.href = "/login"; }}
          >
            Logout
          </button>
        </div>
      )}
    </div>
  );
}

export default function Navbar() {
  const { user } = useAuth();
  const pathname = usePathname();

  return (
    <nav className="w-full flex items-center justify-between py-3 px-4 sm:px-6 lg:px-8 bg-white shadow-sm fixed top-0 left-0 z-30 border-b border-slate-100">
      <div className="flex items-center">
        <Link href="/dashboard" className="flex items-center mr-8" title="Dashboard">
          <span className="font-bold text-lg tracking-tight text-slate-900">RedditMVP</span>
        </Link>
        <div className="hidden md:flex items-center space-x-6">
          {user && (
            <Link href="/dashboard" className={`py-1.5 font-medium text-sm transition-colors duration-200 ${pathname.startsWith('/dashboard') ? 'text-[#FF4500]' : 'text-slate-600 hover:text-[#FF4500]'}`}>
              Dashboard
            </Link>
          )}
           <Link href="/posts" className={`py-1.5 font-medium text-sm transition-colors duration-200 ${pathname.startsWith('/posts') ? 'text-[#FF4500]' : 'text-slate-600 hover:text-[#FF4500]'}`}>
            Posts
          </Link>
          <Link href="/ai" className={`py-1.5 font-medium text-sm transition-colors duration-200 ${pathname.startsWith('/ai') ? 'text-[#FF4500]' : 'text-slate-600 hover:text-[#FF4500]'}`}>
            AI
          </Link>
          <Link href="/keywords" className={`py-1.5 font-medium text-sm transition-colors duration-200 ${pathname.startsWith('/keywords') ? 'text-[#FF4500]' : 'text-slate-600 hover:text-[#FF4500]'}`}>
            Monitoring
          </Link>
        </div>
      </div>
      <div className="flex items-center space-x-4">
        {user ? (
          <UserMenu />
        ) : (
          <>
            <Link href="/login" className="py-1.5 px-3 font-medium text-sm text-slate-600 hover:text-[#FF4500] transition-colors">
              Login
            </Link>
            <Link href="/register" className="py-1.5 px-4 rounded-md font-medium text-sm bg-[#FF4500] hover:bg-[#FF4500]/90 text-white transition-colors">
              Sign Up
            </Link>
          </>
        )}
      </div>
    </nav>
  );
}
</file>

<file path="client/src/app/posts/[id]/page.tsx">
"use client";
import React, { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { useAuth } from "@/lib/auth";
import api from "@/lib/axios";
import Link from "next/link";
import ReactMarkdown from "react-markdown";

// --- Improvement: Type-safe data model based on your API docs ---
type PostStatus = "Draft" | "Scheduled" | "Posted" | "Error";

interface Post {
  id: string;
  title: string;
  body: string;
  subreddit: string;
  status: PostStatus;
  scheduled_at?: string;
  posted_at?: string;
  createdAt: string;
  updatedAt: string;
  author: {
    email: string;
  };
  redditAccount?: {
    reddit_username: string;
  };
}

// --- Improvement: Reusable Status Badge Component ---
const StatusBadge = ({ status }: { status: PostStatus }) => {
  const statusStyles: Record<PostStatus, string> = {
    Draft: "bg-slate-100 text-slate-800",
    Scheduled: "bg-yellow-100 text-yellow-800",
    Posted: "bg-green-100 text-green-800",
    Error: "bg-red-100 text-red-800",
  };
  return (
    <span
      className={`px-2.5 py-0.5 text-xs font-semibold rounded-full ${statusStyles[status]}`}
    >
      {status}
    </span>
  );
};

// --- Main Page Component ---
export default function PostDetailPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();
  const params = useParams();
  const postId = params?.id as string;

  const [post, setPost] = useState<Post | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [form, setForm] = useState({ title: "", body: "", subreddit: "" });

  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [loading, setLoading] = useState(true);
  
  const [isSaving, setIsSaving] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isScheduling, setIsScheduling] = useState(false);

  // Add state for accounts and selected account
  const [accounts, setAccounts] = useState<{ id: string; reddit_username: string }[]>([]);
  const [selectedAccountId, setSelectedAccountId] = useState("");

  useEffect(() => {
    if (!authLoading && !user) {
      router.replace("/login");
    }
  }, [user, authLoading, router]);

  useEffect(() => {
    if (!user || !postId) return;

    const fetchData = async () => {
      setLoading(true);
      setError("");
      try {
        const [postRes, accountsRes] = await Promise.all([
          api.get<{ post: Post }>(`/api/posts/${postId}`),
          api.get<{ accounts: { id: string; reddit_username: string }[] }>("/api/auth/reddit/accounts"),
        ]);
        setPost(postRes.data.post);
        setForm({
          title: postRes.data.post.title,
          body: postRes.data.post.body,
          subreddit: postRes.data.post.subreddit,
        });
        setAccounts(accountsRes.data.accounts);
        if (accountsRes.data.accounts.length > 0) {
          setSelectedAccountId(accountsRes.data.accounts[0].id);
        }
      } catch (err: unknown) {
        setError(
          (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
            ? (err.response.data.error as string)
            : (err instanceof Error ? err.message : "Failed to load data.")
        );
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, [user, postId]);

  const handleSaveChanges = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSaving(true);
    setError("");
    setSuccess("");
    try {
      const res = await api.put<{ post: Post }>(`/api/posts/${postId}`, form);
      setPost(res.data.post);
      setSuccess("Post updated successfully!");
      setIsEditing(false);
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "Failed to update the post.")
      );
    } finally {
      setIsSaving(false);
    }
  };
  
  const handleDelete = async () => {
    if (!window.confirm("Are you sure you want to permanently delete this post?")) return;
    setIsDeleting(true);
    setError("");
    try {
      await api.delete(`/api/posts/${postId}`);
      router.push("/posts?deleted=true");
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "Failed to delete the post.")
      );
      setIsDeleting(false);
    }
  };

  const handleSchedule = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const scheduledAt = (e.currentTarget.elements.namedItem("scheduleAt") as HTMLInputElement).value;
    if (!scheduledAt) {
      setError("Please select a date and time to schedule the post.");
      return;
    }
    if (!selectedAccountId) {
      setError("Please select a Reddit account to post with.");
      return;
    }
    setIsScheduling(true);
    setError("");
    setSuccess("");
    try {
      const res = await api.post<{ post: Post }>(`/api/posts/${postId}/schedule`, {
        scheduled_at: new Date(scheduledAt).toISOString(),
        redditAccountId: selectedAccountId,
      });
      setPost(res.data.post);
      setSuccess("Post scheduled successfully!");
      setTimeout(() => router.push("/posts"), 1200);
    } catch (err: unknown) {
      setError(
        (err && typeof err === "object" && "response" in err && err.response && typeof err.response === "object" && "data" in err.response && err.response.data && typeof err.response.data === "object" && "error" in err.response.data)
          ? (err.response.data.error as string)
          : (err instanceof Error ? err.message : "Failed to schedule the post.")
      );
    } finally {
      setIsScheduling(false);
    }
  };

  if (authLoading || loading) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          <div className="text-lg text-slate-600 font-medium">Loading Post...</div>
        </div>
      </main>
    );
  }

  if (!post) {
    return (
        <main className="flex items-center justify-center min-h-screen bg-slate-50">
            <div className="text-center p-8 bg-white rounded-lg shadow-md border border-red-200">
                <h2 className="text-xl font-bold text-red-600">Error</h2>
                <p className="text-slate-700 mt-2">{error || "Post not found."}</p>
                <Link href="/posts" className="mt-4 inline-block bg-blue-600 text-white font-semibold rounded-lg px-4 py-2 hover:bg-blue-700 transition-colors">
                    Back to Posts
                </Link>
            </div>
        </main>
    );
  }

  const canEdit = post.status !== "Posted";

  return (
    <main className="min-h-screen bg-slate-50">
      {/* Header with Breadcrumbs */}
      <div className="bg-white border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center gap-2 text-sm">
             <Link href="/dashboard" className="text-slate-500 hover:text-blue-600">Dashboard</Link>
             <span className="text-slate-400">/</span>
             <Link href="/posts" className="text-slate-500 hover:text-blue-600">Posts</Link>
             <span className="text-slate-400">/</span>
             <span className="font-semibold text-slate-800 truncate">{post.title}</span>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Alerts for success and error messages */}
        {success && <div className="mb-4 p-4 text-sm text-green-800 bg-green-100 border border-green-200 rounded-lg">{success}</div>}
        {error && <div className="mb-4 p-4 text-sm text-red-800 bg-red-100 border border-red-200 rounded-lg">{error}</div>}
      
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content (Left Column) */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm border border-slate-200">
                {isEditing && canEdit ? (
                    <form onSubmit={handleSaveChanges}>
                        <div className="p-6 space-y-4">
                            <div>
                                <label htmlFor="title" className="block text-sm font-medium text-slate-700 mb-1">Title</label>
                                <input id="title" type="text" value={form.title} onChange={e => setForm(f => ({...f, title: e.target.value}))} className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                            </div>
                            <div>
                                <label htmlFor="subreddit" className="block text-sm font-medium text-slate-700 mb-1">Subreddit (r/)</label>
                                <input id="subreddit" type="text" value={form.subreddit} onChange={e => setForm(f => ({...f, subreddit: e.target.value}))} className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500" required />
                            </div>
                             <div>
                                <label htmlFor="body" className="block text-sm font-medium text-slate-700 mb-1">Body</label>
                                <textarea id="body" value={form.body} onChange={e => setForm(f => ({...f, body: e.target.value}))} className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500 min-h-[250px]" required />
                            </div>
                        </div>
                        <div className="p-4 bg-slate-50 border-t border-slate-200 flex justify-end gap-3">
                            <button type="button" onClick={() => setIsEditing(false)} className="px-4 py-2 text-sm font-semibold text-slate-700 bg-white border border-slate-300 rounded-lg hover:bg-slate-50">Cancel</button>
                            <button type="submit" disabled={isSaving} className="px-4 py-2 text-sm font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700 disabled:bg-slate-400 flex items-center">
                                {isSaving && <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
                                {isSaving ? 'Saving...' : 'Save Changes'}
                            </button>
                        </div>
                    </form>
                ) : (
                    <div className="p-6">
                        <h1 className="text-2xl font-bold text-slate-900">{post.title}</h1>
                        <p className="text-sm text-slate-500 mt-1">in <span className="font-semibold">r/{post.subreddit}</span></p>
                        <div className="mt-6 prose prose-slate max-w-none">
                            <ReactMarkdown>{post.body}</ReactMarkdown>
                        </div>
                    </div>
                )}
            </div>
          </div>
          
          {/* Sidebar (Right Column) */}
          <div className="space-y-6">
            <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
              <h3 className="text-lg font-semibold text-slate-900 mb-4">Post Status</h3>
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium text-slate-600">Status</span>
                <StatusBadge status={post.status} />
              </div>
              <ul className="mt-4 space-y-2 text-sm text-slate-600 border-t border-slate-200 pt-4">
                 <li><strong>Created:</strong> {new Date(post.createdAt).toLocaleString()}</li>
                 <li><strong>Last Updated:</strong> {new Date(post.updatedAt).toLocaleString()}</li>
                 <li><strong>Scheduled for:</strong> {post.scheduled_at ? new Date(post.scheduled_at).toLocaleString() : 'N/A'}</li>
                 <li><strong>Posted at:</strong> {post.posted_at ? new Date(post.posted_at).toLocaleString() : 'N/A'}</li>
              </ul>
            </div>
            {canEdit && (
                <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6">
                    <h3 className="text-lg font-semibold text-slate-900 mb-4">Actions</h3>
                    <div className="space-y-3">
                        {!isEditing && <button onClick={() => setIsEditing(true)} className="w-full px-4 py-2 font-semibold text-white bg-blue-600 rounded-lg hover:bg-blue-700">Edit Post</button>}
                        <form onSubmit={handleSchedule} className="space-y-2">
                          <div>
                            <label htmlFor="redditAccount" className="block text-sm font-medium text-slate-700 mb-1">Post with Account</label>
                            <select
                              id="redditAccount"
                              value={selectedAccountId}
                              onChange={e => setSelectedAccountId(e.target.value)}
                              className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500"
                              required
                            >
                              <option value="" disabled>Select an account</option>
                              {accounts.map(acc => (
                                <option key={acc.id} value={acc.id}>
                                  {acc.reddit_username}
                                </option>
                              ))}
                            </select>
                          </div>
                          <input name="scheduleAt" type="datetime-local" className="w-full px-4 py-2 rounded-lg border border-slate-300 focus:outline-none focus:ring-2 focus:ring-blue-500" />
                          <button type="submit" disabled={isScheduling || !selectedAccountId} className="w-full px-4 py-2 font-semibold text-white bg-purple-600 rounded-lg hover:bg-purple-700 disabled:bg-slate-400 flex items-center justify-center">
                            {isScheduling && <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
                            {isScheduling ? 'Scheduling...' : 'Schedule'}
                          </button>
                        </form>
                        <button onClick={handleDelete} disabled={isDeleting} className="w-full px-4 py-2 font-semibold text-white bg-red-600 rounded-lg hover:bg-red-700 disabled:bg-slate-400 flex items-center justify-center">
                            {isDeleting && <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>}
                            {isDeleting ? 'Deleting...' : 'Delete Post'}
                        </button>
                    </div>
                </div>
            )}
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="client/src/app/dashboard/page.tsx">
// client/src/app/dashboard/page.tsx

"use client";
import React, { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/lib/auth";
import api from "@/lib/axios";
import Link from "next/link";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
dayjs.extend(relativeTime);

// --- API types ---
interface Post {
  id: string;
  title: string;
  body: string;
  subreddit: string;
  status: "Draft" | "Scheduled" | "Posted" | "Error";
  scheduled_at?: string;
  createdAt?: string;
  updatedAt?: string;
  // ... other fields as needed
}

// --- Add RedditAccount interface ---
interface RedditAccount {
  id: string;
  reddit_username: string;
}

export default function DashboardPage() {
  const { user, loading } = useAuth();
  const router = useRouter();
  const [accounts, setAccounts] = useState<RedditAccount[] | null>(null);
  const [fetchingAccounts, setFetchingAccounts] = useState(true);
  const [stats, setStats] = useState({
    totalPosts: 0,
    scheduledPosts: 0,
    draftPosts: 0,
    aiGeneratedContent: 0
  });
  const [recentPosts, setRecentPosts] = useState<Post[]>([]);

  useEffect(() => {
    if (!loading && !user) {
      router.replace("/login");
    }
  }, [user, loading, router]);

  useEffect(() => {
    if (!user) return;
    setFetchingAccounts(true);
    const fetchDashboardData = async () => {
      try {
        const [accountsRes, postsRes] = await Promise.all([
          api.get<{ accounts: RedditAccount[] }>("/api/auth/reddit/accounts"),
          api.get<{ posts: Post[] }>("/api/posts?limit=20")
        ]);
        setAccounts(accountsRes.data.accounts);
        const posts = postsRes.data.posts || [];
        // Calculate stats
        const totalPosts = posts.length;
        const scheduledPosts = posts.filter(p => p.status === "Scheduled").length;
        const draftPosts = posts.filter(p => p.status === "Draft").length;
        const aiGeneratedContent = posts.filter(p => p.body && p.body.includes("AI") || p.title && p.title.includes("AI")).length; // Example logic, adjust as needed
        setStats({ totalPosts, scheduledPosts, draftPosts, aiGeneratedContent });
        // Recent activity: sort by created/updated date, take latest 3
        const sorted = posts
          .slice()
          .sort((a, b) =>
            new Date(b.updatedAt || b.createdAt || "").getTime() -
            new Date(a.updatedAt || a.createdAt || "").getTime()
          );
        setRecentPosts(sorted.slice(0, 3));
      } catch {
        setAccounts([]);
        setStats({ totalPosts: 0, scheduledPosts: 0, draftPosts: 0, aiGeneratedContent: 0 });
        setRecentPosts([]);
      } finally {
        setFetchingAccounts(false);
      }
    };
    fetchDashboardData();
  }, [user]);

  useEffect(() => {
    if (!fetchingAccounts && accounts && accounts.length === 0) {
      router.replace("/reddit-connect");
    }
  }, [fetchingAccounts, accounts, router]);

  if (loading || !user || fetchingAccounts || accounts === null) {
    return (
      <main className="flex items-center justify-center min-h-screen bg-slate-50">
        <div className="flex flex-col items-center gap-4">
          <div className="w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
          <div className="text-lg text-slate-600 font-medium">Loading dashboard...</div>
        </div>
      </main>
    );
  }

  return (
    <main className="min-h-screen bg-slate-50">
      {/* Header */}
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 md:pt-28">
        {/* Floating/blurred background shapes */}
        <div className="absolute left-1/2 top-8 -translate-x-1/2 w-[340px] h-[80px] bg-gradient-to-r from-[#FF4500]/20 via-[#FF6B35]/20 to-[#FFF7F0]/0 rounded-full blur-3xl opacity-60 pointer-events-none z-0"></div>
        <div className="absolute top-1/4 left-1/4 w-40 h-40 bg-gradient-to-br from-[#FF4500]/10 to-transparent rounded-full blur-2xl opacity-40 pointer-events-none z-0"></div>
        <div className="absolute bottom-0 right-1/4 w-64 h-64 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-30 pointer-events-none z-0"></div>
        <div className="relative z-10 flex flex-col items-center text-center">
          {/* Badge */}
          <div className="mb-4 inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 shadow-sm">
            <span className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
            <span className="text-sm font-medium text-slate-700">Welcome to your dashboard</span>
          </div>
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-extrabold leading-tight text-slate-900 mb-3 tracking-tight" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Dashboard
          </h1>
          <p className="text-slate-700 text-lg sm:text-xl font-medium mb-2" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Welcome back, {user.clientName || user.email}
          </p>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 mt-6">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-slate-600">Total Posts</p>
                <p className="text-3xl font-bold text-slate-900 mt-1">{stats.totalPosts}</p>
              </div>
              <div className="w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center">
                <span className="text-2xl">📊</span>
              </div>
            </div>
            <p className="text-sm text-green-600 mt-2">+12% from last month</p>
          </div>

          <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-slate-600">Scheduled</p>
                <p className="text-3xl font-bold text-slate-900 mt-1">{stats.scheduledPosts}</p>
              </div>
              <div className="w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center">
                <span className="text-2xl">⏰</span>
              </div>
            </div>
            <p className="text-sm text-blue-600 mt-2">Next post in 2 hours</p>
          </div>

          <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-slate-600">Drafts</p>
                <p className="text-3xl font-bold text-slate-900 mt-1">{stats.draftPosts}</p>
              </div>
              <div className="w-12 h-12 bg-orange-50 rounded-lg flex items-center justify-center">
                <span className="text-2xl">📝</span>
              </div>
            </div>
            <p className="text-sm text-slate-600 mt-2">Ready to publish</p>
          </div>

          <div className="bg-white rounded-xl p-6 shadow-sm border border-slate-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-slate-600">AI Generated</p>
                <p className="text-3xl font-bold text-slate-900 mt-1">{stats.aiGeneratedContent}</p>
              </div>
              <div className="w-12 h-12 bg-green-50 rounded-lg flex items-center justify-center">
                <span className="text-2xl">🤖</span>
              </div>
            </div>
            <p className="text-sm text-purple-600 mt-2">50% of total content</p>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mb-8">
          <h2 className="text-lg font-semibold text-slate-900 mb-4">Quick Actions</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <Link href="/posts" className="group bg-white rounded-xl p-6 shadow-sm border border-slate-200 hover:shadow-md hover:border-blue-300 transition-all duration-200">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center group-hover:bg-blue-100 transition-colors">
                  <span className="text-2xl">📝</span>
                </div>
                <div>
                  <h3 className="font-semibold text-slate-900 group-hover:text-blue-600 transition-colors">Manage Posts</h3>
                  <p className="text-sm text-slate-600 mt-1">View, create, and edit your content</p>
                </div>
              </div>
            </Link>

            <Link href="/ai" className="group bg-white rounded-xl p-6 shadow-sm border border-slate-200 hover:shadow-md hover:border-purple-300 transition-all duration-200">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-purple-50 rounded-lg flex items-center justify-center group-hover:bg-purple-100 transition-colors">
                  <span className="text-2xl">🤖</span>
                </div>
                <div>
                  <h3 className="font-semibold text-slate-900 group-hover:text-purple-600 transition-colors">AI Content Generator</h3>
                  <p className="text-sm text-slate-600 mt-1">Generate ideas and drafts with AI</p>
                </div>
              </div>
            </Link>

            <Link href="/keywords" className="group bg-white rounded-xl p-6 shadow-sm border border-slate-200 hover:shadow-md hover:border-yellow-300 transition-all duration-200">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-yellow-50 rounded-lg flex items-center justify-center group-hover:bg-yellow-100 transition-colors">
                  <span className="text-2xl">🔍</span>
                </div>
                <div>
                  <h3 className="font-semibold text-slate-900 group-hover:text-yellow-700 transition-colors">Keyword Monitoring</h3>
                  <p className="text-sm text-slate-600 mt-1">Track mentions across Reddit</p>
                </div>
              </div>
            </Link>
          </div>
        </div>

        {/* Recent Activity */}
        <div className="bg-white rounded-xl shadow-sm border border-slate-200">
          <div className="p-6 border-b border-slate-200">
            <h2 className="text-lg font-semibold text-slate-900">Recent Activity</h2>
          </div>
          <div className="p-6">
            <div className="space-y-4">
              {recentPosts.length === 0 ? (
                <div className="text-slate-500 text-sm">No recent activity.</div>
              ) : (
                recentPosts.map((post, idx) => (
                  <div key={post.id} className="flex items-center gap-3 p-3 bg-slate-50 rounded-lg">
                    <div className={`w-2 h-2 rounded-full ${post.status === "Posted" ? "bg-green-500" : post.status === "Scheduled" ? "bg-purple-500" : post.status === "Draft" ? "bg-blue-500" : "bg-slate-400"}`}></div>
                    <div className="flex-1">
                      <p className="text-sm font-medium text-slate-900">
                        {post.status === "Posted" ? "Post published successfully" : post.status === "Scheduled" ? "Post scheduled" : post.status === "Draft" ? "Draft saved" : "Post updated"}
                      </p>
                      <p className="text-xs text-slate-600">
                        {post.subreddit ? `r/${post.subreddit}` : ""} • {dayjs((post.updatedAt as string) || (post.createdAt as string) || '').fromNow()}
                      </p>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
</file>

<file path="client/src/app/layout.tsx">
// client/src/app/layout.tsx

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import ClientBody from "./ClientBody";
import Script from "next/script";
import { AuthProvider } from "@/lib/auth"; // No useAuth here
import React from "react";
import Navbar from "./Navbar";
import { ThemeProvider } from "@/lib/theme";
import { SocketProvider } from '@/contexts/SocketContext';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "RedditMVP",
  description: "AI-powered Reddit management and monitoring",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // We can no longer determine the navbar state here on the server
  // This will be handled client-side or with a different pattern if needed.
  // For now, we simplify and let the Navbar decide its own state.

  return (
    <html lang="en" className={`light ${geistSans.variable} ${geistMono.variable}`}>
      <head>
        <Script
          crossOrigin="anonymous"
          src="//unpkg.com/same-runtime/dist/index.global.js"
        />
      </head>
      <body suppressHydrationWarning className="antialiased pt-16"> {/* Add padding for fixed navbar */}
        <ThemeProvider>
          <AuthProvider>
            <SocketProvider> {/* SocketProvider now wraps everything */}
              <Navbar />
              <ClientBody>{children}</ClientBody>
            </SocketProvider>
          </AuthProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
</file>

<file path="client/src/app/page.tsx">
"use client";
import Image from "next/image";
import React from "react"; // Added missing import for React
import Link from "next/link";

export default function Home() {
  const [open, setOpen] = React.useState<number | null>(null);
  const faqs = [
    {
      q: "What is RedditMVP?",
      a: "RedditMVP is an AI-powered platform to help you create, manage, and grow Reddit communities with smart tools and analytics."
    },
    {
      q: "Is my data private and secure?",
      a: "Absolutely. Your data is encrypted and you have full control over your community’s information."
    },
    {
      q: "Can I try RedditMVP for free?",
      a: "Yes! You can get started for free and explore all the core features. Premium features are available with a free trial."
    },
    {
      q: "Do I need to know coding to use RedditMVP?",
      a: "No coding required. Everything is designed to be user-friendly and accessible to everyone."
    },
    {
      q: "How do I get support?",
      a: "Our support team is available via chat and email to help you with any questions or issues."
    }
  ];
  return (
    <main className="flex flex-col items-center justify-center min-h-screen w-full bg-gradient-to-br from-[#FFF7F0] via-[#FF6B35]/10 to-[#FFF7F0] p-0 max-w-none mx-0 relative overflow-hidden border-0 shadow-none">
      
      {/* Main Hero Content */}
      <section className="relative flex flex-col w-full justify-center items-center flex-1 min-h-screen pt-32 pb-20 z-10 px-6 bg-gradient-to-b from-[#FFF7F0] via-[#FF6B35]/10 to-[#FFF7F0] overflow-visible">
        {/* Animated floating shape */}
        <div className="absolute left-1/2 top-24 -translate-x-1/2 w-[420px] h-[120px] bg-gradient-to-r from-[#FF4500]/20 via-[#FF6B35]/20 to-[#FFF7F0]/0 rounded-full blur-3xl opacity-70 animate-pulse-slow pointer-events-none"></div>
        {/* Subtle background elements */}
        <div className="absolute inset-0 overflow-hidden pointer-events-none">
          <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-gradient-to-br from-[#FF4500]/10 to-transparent rounded-full blur-3xl"></div>
          <div className="absolute bottom-1/4 right-1/4 w-96 h-96 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl"></div>
        </div>
        
        <div className="w-full max-w-4xl flex flex-col items-center text-center animate-fade-slide relative z-10">
          {/* Professional badge */}
          <div className="mb-6 inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-slate-50 to-slate-100 border border-slate-200 shadow-sm">
            <span className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></span>
            <span className="text-sm font-medium text-slate-700">Trusted by 10,000+ communities</span>
          </div>
          
          <h1 className="text-3xl sm:text-4xl md:text-5xl lg:text-6xl font-bold leading-[1.1] text-slate-900 mb-6 tracking-tight" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Build thriving Reddit communities with{' '}
            <span className="bg-gradient-to-r from-[#FF4500] via-[#FF6B35] to-[#FF4500] bg-clip-text text-transparent font-bold">
              AI-powered tools
            </span>
          </h1>
          
          <p className="mt-4 text-slate-600 text-lg sm:text-xl font-normal max-w-2xl mx-auto leading-relaxed" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Effortlessly <span className="italic decoration-[#FF4500] decoration-2 underline-offset-4 font-semibold">grow</span> and engage your Reddit community with smart content, automated moderation, and actionable analytics—all in one place.
          </p>
          
          {/* Social proof */}
          <div className="mt-8 flex items-center gap-6 text-sm text-slate-500">
            <div className="flex items-center gap-1">
              <svg className="w-4 h-4 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
              </svg>
              <span>4.9/5 rating</span>
            </div>
            <div className="flex items-center gap-1">
              <svg className="w-4 h-4 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
              <span>No credit card required</span>
            </div>
            <div className="flex items-center gap-1">
              <svg className="w-4 h-4 text-slate-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
              </svg>
              <span>SOC 2 compliant</span>
            </div>
          </div>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4 mt-10 mb-8 w-full max-w-md justify-center animate-fade-slide" style={{animationDelay: '0.1s'}}>
          <Link href="/register" className="flex-1 bg-[#FF4500] hover:bg-[#FF6B35] text-white font-semibold rounded-xl px-6 py-3 text-sm shadow-lg hover:shadow-xl transition-all duration-200 text-center border-2 border-transparent hover:border-[#FF6B35] focus:outline-none focus:ring-2 focus:ring-[#FF4500] focus:ring-offset-2 transform hover:scale-105">
            Start building for free
          </Link>
          <Link href="/ai" className="flex-1 bg-white border border-slate-300 hover:bg-slate-50 text-slate-700 font-semibold rounded-xl px-6 py-3 text-sm shadow-lg hover:shadow-xl transition-all duration-200 text-center hover:border-slate-400 transform hover:scale-105">
            View demo
          </Link>
        </div>
        
        <div className="text-center animate-fade-slide" style={{animationDelay: '0.3s'}}>
          <p className="text-sm text-slate-500 mb-2">Already have an account?</p>
          <Link href="/login" className="text-base font-medium text-[#FF4500] hover:text-[#FF6B35] hover:underline transition-colors duration-200">
            Sign in →
          </Link>
        </div>
        
        {/* Animated Down Arrow */}
        <div className="mt-16 flex justify-center animate-bounce-slow">
          <DownArrowSVG />
        </div>
      </section>
      {/* Video Section */}
      <section className="w-full flex flex-col items-center -mt-10 mb-20 px-4 relative z-20">
        <div className="w-full max-w-5xl bg-gradient-to-br from-[#FFF7F0] via-[#FF6B35]/10 to-[#FFF7F0] rounded-3xl shadow-2xl border border-slate-200 p-0 flex flex-col items-center relative overflow-hidden">
          <div className="absolute inset-0 pointer-events-none z-0" style={{background: 'radial-gradient(circle at 70% 30%, #FF6B35 0%, transparent 70%)'}}></div>
          <div className="relative z-10 p-12 w-full flex flex-col items-center">
            <h2 className="text-3xl sm:text-4xl font-extrabold text-slate-900 mb-3 text-center" style={{fontFamily: 'Plus Jakarta Sans'}}>See RedditMVP in Action</h2>
            <p className="text-slate-600 text-lg sm:text-2xl mb-8 text-center max-w-2xl" style={{fontFamily: 'Plus Jakarta Sans'}}>Watch how you can create, manage, and grow your Reddit community with powerful, easy-to-use tools.</p>
            <div className="w-full aspect-video rounded-2xl overflow-hidden shadow-xl border border-slate-100 bg-slate-100 flex items-center justify-center">
              <iframe
                className="w-full h-full"
                src="https://www.youtube.com/embed/dQw4w9WgXcQ"
                title="RedditMVP Demo Video"
                frameBorder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowFullScreen
              ></iframe>
            </div>
          </div>
        </div>
      </section>
      {/* Bento Grid Section */}
      <section className="w-full flex flex-col justify-center items-center px-4 sm:px-6 md:px-8 pb-28">
        {/* Animated Heading */}
        <div className="flex flex-col items-center mb-12 sm:mb-16">
          <h2 className="text-4xl sm:text-5xl font-extrabold text-center text-slate-900 animate-fade-slide">
            Discover What You Can Do
          </h2>
          <p className="mt-4 max-w-2xl text-center text-slate-600 text-lg sm:text-xl animate-fade-slide" style={{animationDelay: '0.2s'}}>
            Powerful tools to help you build, manage and grow your Reddit community
          </p>
        </div>
        
        <div className="grid gap-4 sm:gap-5 w-full max-w-6xl grid-cols-1 sm:grid-cols-2 md:grid-cols-6 auto-rows-[250px]">
          {/* Card 1: AI Content Generator */}
          <div className="bento-card bento-shine col-span-1 sm:col-span-2 md:col-span-3 row-span-2 bg-white rounded-2xl overflow-hidden relative border border-slate-100">
            <div className="absolute inset-0 bg-gradient-to-br from-[#FFF7F0] to-white opacity-80"></div>
            <div className="h-full flex flex-col justify-between p-5 sm:p-6 md:p-7 text-slate-800 relative">
              <div className="flex flex-col gap-3 sm:gap-4">
                <div className="flex items-start justify-between">
                  <span className="text-3xl sm:text-4xl bento-icon">🤖</span>
                  <span className="bg-[#FF4500]/10 text-[#FF4500] rounded-full px-3 py-1 text-xs font-bold tracking-wide bento-badge">NEW</span>
                </div>
                <h3 className="text-xl sm:text-2xl font-extrabold bento-title mt-1 text-slate-900">AI Content Generator</h3>
                <p className="text-sm sm:text-base md:text-lg font-medium text-slate-600 max-w-md">Create engaging posts and comments tailored to your community's interests using advanced AI that learns from successful content.</p>
              </div>
              <div className="flex items-center gap-3 mt-4">
                <button className="bento-btn bg-slate-100 hover:bg-slate-200 text-slate-800 font-bold px-5 py-2.5 rounded-xl">Try it now</button>
                <button className="bento-btn bg-white border border-slate-200 hover:bg-slate-50 text-slate-700 font-bold px-4 py-2.5 rounded-xl flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clipRule="evenodd" />
                  </svg>
                  See demo
                </button>
              </div>
            </div>
          </div>
          
          {/* Card 2: Analytics Dashboard */}
          <div className="bento-card bento-shine col-span-1 sm:col-span-2 md:col-span-3 row-span-2 bg-[#23272f] rounded-2xl overflow-hidden relative">
            <div className="h-full flex flex-col justify-between p-5 sm:p-6 md:p-7 text-white relative z-10">
              <div className="flex flex-col gap-2">
                <div className="flex justify-between items-center">
                  <h3 className="text-xl sm:text-2xl font-extrabold bento-title">Analytics Dashboard</h3>
                  <span className="bento-icon text-2xl sm:text-3xl">📊</span>
                </div>
                <p className="text-white/80 mb-3 sm:mb-4">Track your community's growth and engagement</p>
                
                <div className="grid grid-cols-2 gap-3 sm:gap-4 mt-1">
                  <div className="bg-white/10 rounded-xl p-3 sm:p-4">
                    <div className="text-white/70 text-xs sm:text-sm mb-1">New Members</div>
                    <div className="text-base sm:text-xl font-bold flex items-center">
                      247
                      <span className="text-green-400 text-xs sm:text-sm ml-2 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
                        </svg>
                        23%
                      </span>
                    </div>
                  </div>
                  <div className="bg-white/10 rounded-xl p-3 sm:p-4">
                    <div className="text-white/70 text-xs sm:text-sm mb-1">Engagement</div>
                    <div className="text-base sm:text-xl font-bold flex items-center">
                      89%
                      <span className="text-green-400 text-xs sm:text-sm ml-2 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 sm:h-4 sm:w-4" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M12 7a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0V8.414l-4.293 4.293a1 1 0 01-1.414 0L8 10.414l-4.293 4.293a1 1 0 01-1.414-1.414l5-5a1 1 0 011.414 0L11 10.586 14.586 7H12z" clipRule="evenodd" />
                        </svg>
                        7%
                      </span>
                    </div>
                  </div>
                </div>
                
                <div className="mt-4 relative h-12 sm:h-16">
                  <div className="absolute inset-0">
                    <svg className="w-full h-full" viewBox="0 0 400 100">
                      <path d="M0,50 C50,30 100,90 150,50 C200,10 250,50 300,40 C350,30 400,60 400,50" fill="none" stroke="#FF4500" strokeWidth="3" />
                      <path d="M0,50 C50,30 100,90 150,50 C200,10 250,50 300,40 C350,30 400,60 400,50" fill="none" stroke="#ffffff" strokeWidth="1" strokeOpacity="0.3" strokeDasharray="5,5" />
                      <circle cx="150" cy="50" r="4" fill="#FF4500" />
                      <circle cx="300" cy="40" r="4" fill="#FF4500" />
                    </svg>
                  </div>
                </div>
              </div>
              <button className="bento-btn bg-white text-slate-900 hover:bg-white/90 font-bold px-5 py-2.5 rounded-xl mt-4 w-fit">View analytics</button>
            </div>
          </div>
          
          {/* Card 3: Community Builder */}
          <div className="bento-card bento-shine col-span-1 sm:col-span-2 md:col-span-2 row-span-2 bg-white rounded-2xl overflow-hidden relative border border-slate-100">
            <div className="h-full flex flex-col justify-between p-5 sm:p-6 md:p-7 text-slate-800 relative">
              <div className="flex flex-col gap-3">
                <div className="flex items-start justify-between">
                  <span className="text-3xl sm:text-4xl bento-icon">🏆</span>
                  <span className="text-xs text-slate-500 font-medium px-2 py-0.5 bg-slate-100 rounded-full">Pro</span>
                </div>
                <h3 className="text-xl sm:text-2xl font-extrabold bento-title mt-1 text-slate-900">Community Builder</h3>
                <p className="text-sm sm:text-base text-slate-600 font-medium">Tools and templates to grow your community from scratch with proven strategies.</p>
                
                <div className="mt-3 bg-slate-50 rounded-xl p-3">
                  <div className="flex justify-between items-center mb-2">
                    <h4 className="font-bold text-slate-700 text-sm">Growth Plan</h4>
                    <span className="text-xs bg-green-100 text-green-700 px-2 py-0.5 rounded-full font-medium">ACTIVE</span>
                  </div>
                  <div className="w-full bg-slate-200 rounded-full h-1.5 sm:h-2">
                    <div className="bg-slate-700 h-1.5 sm:h-2 rounded-full" style={{ width: '65%' }}></div>
                  </div>
                  <div className="flex justify-between text-xs mt-2 text-slate-500">
                    <span>Step 3 of 5</span>
                    <span>65% Complete</span>
                  </div>
                </div>
              </div>
              <button className="bento-btn bg-slate-100 hover:bg-slate-200 text-slate-800 font-bold px-5 py-2.5 rounded-xl mt-4 w-fit">Continue setup</button>
            </div>
          </div>
          
          {/* Card 4: Content Calendar */}
          <div className="bento-card bento-shine col-span-1 sm:col-span-1 md:col-span-2 row-span-1 bg-gradient-to-br from-slate-50 to-slate-100 rounded-2xl overflow-hidden relative border border-slate-100">
            <div className="h-full flex justify-between p-4 sm:p-5 text-slate-800 relative">
              <div className="flex flex-col gap-2 flex-1">
                <div className="flex items-center gap-2">
                  <span className="text-xl sm:text-2xl bento-icon">📅</span>
                  <h3 className="text-base sm:text-lg font-extrabold bento-title">Content Calendar</h3>
                </div>
                <p className="text-slate-600 text-xs sm:text-sm font-medium mt-1">Schedule and automate posts</p>
              </div>
              
              <div className="flex items-end">
                <button className="bento-btn bg-slate-700 hover:bg-slate-800 text-white font-medium px-3 sm:px-4 py-1.5 sm:py-2 rounded-xl text-xs sm:text-sm">View</button>
              </div>
            </div>
          </div>
          
          {/* Card 5: Integrations */}
          <div className="bento-card bento-shine col-span-1 sm:col-span-1 md:col-span-2 row-span-1 bg-white rounded-2xl overflow-hidden border border-slate-100 relative">
            <div className="h-full flex items-center p-4 sm:p-5 text-slate-800 relative">
              <div className="grid grid-cols-3 gap-2 sm:gap-3 w-full">
                <div className="flex flex-col items-center">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-slate-50 rounded-lg shadow-sm flex items-center justify-center">
                    <svg className="h-4 w-4 sm:h-5 sm:w-5 text-slate-700" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M19 9l-7 7-7-7" />
                    </svg>
                  </div>
                  <span className="text-xs mt-1 font-medium">Tasks</span>
                </div>
                <div className="flex flex-col items-center">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-slate-50 rounded-lg shadow-sm flex items-center justify-center">
                    <svg className="h-4 w-4 sm:h-5 sm:w-5 text-slate-700" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                    </svg>
                  </div>
                  <span className="text-xs mt-1 font-medium">Notes</span>
                </div>
                <div className="flex flex-col items-center">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-slate-50 rounded-lg shadow-sm flex items-center justify-center">
                    <svg className="h-4 w-4 sm:h-5 sm:w-5 text-slate-700" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
                      <circle cx="12" cy="12" r="10"></circle>
                      <polyline points="12 6 12 12 16 14"></polyline>
                    </svg>
                  </div>
                  <span className="text-xs mt-1 font-medium">Time</span>
                </div>
              </div>
              <div className="absolute top-2 right-3">
                <span className="text-xs text-slate-500 font-semibold">+ More</span>
              </div>
            </div>
          </div>
          
          {/* Card 6: Call to Action */}
          <div className="bento-card bento-shine col-span-1 sm:col-span-2 md:col-span-4 row-span-1 bg-gradient-to-r from-slate-800 to-slate-900 rounded-2xl overflow-hidden relative">
            <div className="absolute right-0 bottom-0 w-20 h-20 sm:w-24 sm:h-24 opacity-10">
              <svg viewBox="0 0 24 24" fill="white">
                <path d="M13 2.05v3.03c3.39.49 6 3.39 6 6.92 0 .9-.18 1.75-.5 2.54l2.6 1.53c.56-1.24.9-2.62.9-4.07 0-5.18-3.95-9.45-9-9.95zM12 19c-3.87 0-7-3.13-7-7 0-3.53 2.61-6.43 6-6.92V2.05c-5.06.5-9 4.76-9 9.95 0 5.52 4.47 10 9.99 10 3.31 0 6.24-1.61 8.06-4.09l-2.6-1.53C16.17 17.98 14.21 19 12 19z" />
              </svg>
            </div>
            <div className="h-full flex items-center justify-between p-5 sm:p-6 md:p-7 text-white relative">
              <div className="flex flex-col gap-1 max-w-xl">
                <h3 className="text-lg sm:text-xl md:text-2xl font-extrabold bento-title">Get premium features for 30 days</h3>
                <p className="text-white/80 text-sm sm:text-base font-medium">Unlock all analytics and premium templates.</p>
              </div>
              <button className="bento-btn bg-white text-slate-900 font-bold px-4 sm:px-5 py-2 sm:py-2.5 rounded-xl hover:bg-opacity-90 transition-all shadow">Try Free</button>
            </div>
          </div>
        </div>
      </section>
      {/* How It Works Section */}
      <section id="how-it-works" className="relative w-full flex flex-col items-center px-4 sm:px-6 md:px-8 py-20 bg-gradient-to-b from-white via-[#FFF7F0] to-white border-t border-slate-100 overflow-hidden">
        {/* Layered background shapes */}
        <div className="absolute -top-24 left-1/2 -translate-x-1/2 w-[700px] h-[200px] bg-gradient-to-r from-[#FF4500]/10 via-[#FF6B35]/5 to-transparent rounded-full blur-3xl opacity-60 pointer-events-none"></div>
        <div className="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-40 pointer-events-none"></div>
        <div className="absolute top-1/3 -right-24 w-64 h-64 bg-gradient-to-br from-[#FF4500]/5 to-transparent rounded-full blur-2xl opacity-30 pointer-events-none"></div>
        
        <div className="relative z-10 w-full max-w-4xl mx-auto mb-16">
          <div className="flex flex-col items-center">
            <span className="px-4 py-1.5 bg-[#FF4500]/5 text-[#FF4500] rounded-full text-sm font-medium mb-6">Simple Process</span>
            <h2 className="text-3xl sm:text-4xl md:text-5xl font-extrabold text-center text-slate-900 mb-6 animate-fade-slide" style={{fontFamily: 'Plus Jakarta Sans'}}>
              How It Works
            </h2>
            <p className="text-slate-600 text-center text-lg max-w-2xl">
              Get started in minutes with our streamlined setup process and intuitive tools
            </p>
          </div>
        </div>
        
        <div className="relative z-10 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 w-full max-w-6xl">
          {/* Step 1 */}
          <div className="flex flex-col items-center bg-white backdrop-blur-md rounded-3xl border border-slate-200/60 shadow-lg hover:shadow-xl p-8 transition-all duration-300 hover:-translate-y-2 group">
            <div className="mb-6 w-16 h-16 flex items-center justify-center bg-gradient-to-br from-[#FF4500]/10 to-[#FF6B35]/5 rounded-2xl text-5xl shadow-sm group-hover:shadow-md transition-all duration-300 relative">
              <span role='img' aria-label='connect' className="relative z-10">🔗</span>
              <div className="absolute inset-0 bg-gradient-to-br from-[#FF4500]/5 to-[#FF6B35]/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-xl"></div>
            </div>
            <div className="w-8 h-8 flex items-center justify-center bg-[#FF4500]/10 rounded-full text-[#FF4500] font-bold text-lg mb-4">1</div>
            <h3 className="font-bold text-xl text-slate-900 mb-3 text-center" style={{fontFamily: 'Plus Jakarta Sans'}}>Connect Your Reddit</h3>
            <div className="w-12 h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent mb-4"></div>
            <p className="text-slate-600 text-center text-base">Securely link your Reddit account in seconds to unlock powerful tools.</p>
          </div>
          
          {/* Step 2 */}
          <div className="flex flex-col items-center bg-white backdrop-blur-md rounded-3xl border border-slate-200/60 shadow-lg hover:shadow-xl p-8 transition-all duration-300 hover:-translate-y-2 group">
            <div className="mb-6 w-16 h-16 flex items-center justify-center bg-gradient-to-br from-[#FF4500]/10 to-[#FF6B35]/5 rounded-2xl text-5xl shadow-sm group-hover:shadow-md transition-all duration-300 relative">
              <span role='img' aria-label='content' className="relative z-10">📝</span>
              <div className="absolute inset-0 bg-gradient-to-br from-[#FF4500]/5 to-[#FF6B35]/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-xl"></div>
            </div>
            <div className="w-8 h-8 flex items-center justify-center bg-[#FF4500]/10 rounded-full text-[#FF4500] font-bold text-lg mb-4">2</div>
            <h3 className="font-bold text-xl text-slate-900 mb-3 text-center" style={{fontFamily: 'Plus Jakarta Sans'}}>Generate Content</h3>
            <div className="w-12 h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent mb-4"></div>
            <p className="text-slate-600 text-center text-base">Use AI to create posts and comments tailored to your community's interests.</p>
          </div>
          
          {/* Step 3 */}
          <div className="flex flex-col items-center bg-white backdrop-blur-md rounded-3xl border border-slate-200/60 shadow-lg hover:shadow-xl p-8 transition-all duration-300 hover:-translate-y-2 group">
            <div className="mb-6 w-16 h-16 flex items-center justify-center bg-gradient-to-br from-[#FF4500]/10 to-[#FF6B35]/5 rounded-2xl text-5xl shadow-sm group-hover:shadow-md transition-all duration-300 relative">
              <span role='img' aria-label='moderation' className="relative z-10">🤖</span>
              <div className="absolute inset-0 bg-gradient-to-br from-[#FF4500]/5 to-[#FF6B35]/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-xl"></div>
            </div>
            <div className="w-8 h-8 flex items-center justify-center bg-[#FF4500]/10 rounded-full text-[#FF4500] font-bold text-lg mb-4">3</div>
            <h3 className="font-bold text-xl text-slate-900 mb-3 text-center" style={{fontFamily: 'Plus Jakarta Sans'}}>Automate Moderation</h3>
            <div className="w-12 h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent mb-4"></div>
            <p className="text-slate-600 text-center text-base">Let smart automations handle spam, rules, and repetitive tasks for you.</p>
          </div>
          
          {/* Step 4 */}
          <div className="flex flex-col items-center bg-white backdrop-blur-md rounded-3xl border border-slate-200/60 shadow-lg hover:shadow-xl p-8 transition-all duration-300 hover:-translate-y-2 group">
            <div className="mb-6 w-16 h-16 flex items-center justify-center bg-gradient-to-br from-[#FF4500]/10 to-[#FF6B35]/5 rounded-2xl text-5xl shadow-sm group-hover:shadow-md transition-all duration-300 relative">
              <span role='img' aria-label='analytics' className="relative z-10">📈</span>
              <div className="absolute inset-0 bg-gradient-to-br from-[#FF4500]/5 to-[#FF6B35]/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-xl"></div>
            </div>
            <div className="w-8 h-8 flex items-center justify-center bg-[#FF4500]/10 rounded-full text-[#FF4500] font-bold text-lg mb-4">4</div>
            <h3 className="font-bold text-xl text-slate-900 mb-3 text-center" style={{fontFamily: 'Plus Jakarta Sans'}}>Track Growth</h3>
            <div className="w-12 h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent mb-4"></div>
            <p className="text-slate-600 text-center text-base">Visualize your community's progress and optimize with actionable analytics.</p>
          </div>
        </div>
        
        <div className="mt-12 flex flex-col items-center relative z-10">
          <Link href="/register" className="flex items-center gap-2 bg-[#FF4500] hover:bg-[#FF6B35] text-white font-semibold rounded-xl px-6 py-3 text-sm shadow-lg hover:shadow-xl transition-all duration-200 text-center transform hover:scale-105">
            Get Started Now
            <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </Link>
        </div>
      </section>
      {/* FAQ Section */}
      <section id="faq" className="relative w-full flex flex-col items-center px-4 sm:px-6 md:px-8 py-20 bg-gradient-to-b from-white via-[#FFF7F0] to-white border-t border-slate-100 overflow-hidden">
        {/* Decorative background shapes */}
        <div className="absolute -top-16 left-1/2 -translate-x-1/2 w-[600px] h-[180px] bg-gradient-to-r from-[#FF4500]/10 via-[#FF6B35]/5 to-transparent rounded-full blur-3xl opacity-60 pointer-events-none"></div>
        <div className="absolute bottom-0 right-0 w-96 h-96 bg-gradient-to-br from-[#FF6B35]/10 to-transparent rounded-full blur-3xl opacity-40 pointer-events-none"></div>
        <div className="absolute top-1/3 -left-24 w-64 h-64 bg-gradient-to-br from-[#FF4500]/5 to-transparent rounded-full blur-2xl opacity-30 pointer-events-none"></div>
        
        <div className="relative z-10 w-full max-w-4xl mx-auto mb-16">
          <div className="flex flex-col items-center">
            <span className="px-4 py-1.5 bg-[#FF4500]/5 text-[#FF4500] rounded-full text-sm font-medium mb-6">Got Questions?</span>
            <h2 className="text-3xl sm:text-4xl md:text-5xl font-extrabold text-center text-slate-900 mb-6 animate-fade-slide" style={{fontFamily: 'Plus Jakarta Sans'}}>
              Frequently Asked Questions
            </h2>
            <p className="text-slate-600 text-center text-lg max-w-2xl">
              Everything you need to know about RedditMVP and how it can help your community grow.
            </p>
          </div>
        </div>
        
        <div className="w-full max-w-3xl mx-auto flex flex-col gap-4 relative z-10">
          {faqs.map((faq, i) => (
            <div 
              key={i} 
              className={`bg-white backdrop-blur-md border border-slate-200/60 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden ${open === i ? 'ring-2 ring-[#FF4500]/20' : 'hover:border-slate-300'}`}
            >
              <button
                className="w-full flex justify-between items-center px-6 py-5 text-left font-semibold text-slate-800 focus:outline-none transition-all group"
                onClick={() => setOpen(open === i ? null : i)}
                aria-expanded={open === i}
                aria-controls={`faq-panel-${i}`}
              >
                <span className="flex items-center gap-3 text-lg">
                  <span className={`flex items-center justify-center w-8 h-8 rounded-full transition-colors duration-300 ${open === i ? 'bg-[#FF4500]/10 text-[#FF4500]' : 'bg-slate-100 text-slate-500 group-hover:bg-[#FF4500]/5 group-hover:text-[#FF4500]'}`}>
                    {open === i ? (
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2.5" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M5 12h14" />
                      </svg>
                    ) : (
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2.5" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" d="M12 5v14m-7-7h14" />
                      </svg>
                    )}
                  </span>
                  {faq.q}
                </span>
              </button>
              <div
                id={`faq-panel-${i}`}
                className={`transition-all duration-300 ease-in-out overflow-hidden ${open === i ? 'max-h-[200px] opacity-100' : 'max-h-0 opacity-0'}`}
                aria-hidden={open !== i}
              >
                <div className="px-6 pb-6 pt-1">
                  <div className="w-full h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent mb-4"></div>
                  <p className="text-slate-600 text-base leading-relaxed">{faq.a}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="mt-12 flex flex-col items-center relative z-10">
          <p className="text-slate-600 mb-6 text-center">Still have questions?</p>
          <Link href="/register" className="flex items-center gap-2 bg-[#FF4500]/10 hover:bg-[#FF4500]/15 text-[#FF4500] font-semibold rounded-xl px-6 py-3 text-sm transition-all duration-200 text-center">
            Contact Support
            <svg className="w-4 h-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </Link>
        </div>
      </section>
      {/* Final Call to Action & Footer */}
      <section className="w-full flex flex-col items-center px-4 sm:px-6 md:px-8 py-16 bg-white border-t border-slate-100">
        <div className="flex flex-col items-center max-w-2xl w-full">
          <h2 className="text-2xl sm:text-3xl font-extrabold text-center text-slate-900 mb-4 animate-fade-slide" style={{fontFamily: 'Plus Jakarta Sans'}}>
            Ready to build your next great Reddit community?
          </h2>
          <p className="text-slate-600 text-center mb-8 animate-fade-slide" style={{animationDelay: '0.1s'}}>
            Sign up now and unlock the power of AI-driven community management.
          </p>
          <a href="/register" className="bento-btn bg-slate-900 text-white font-bold px-8 py-4 rounded-2xl shadow hover:bg-slate-800 transition-all text-lg animate-fade-slide" style={{animationDelay: '0.2s'}}>Get Started Free</a>
        </div>
        {/* Modern Footer */}
        <footer className="relative w-full mt-16 pt-10 border-t border-slate-200/50 bg-white text-center animate-fade-slide overflow-hidden" style={{animationDelay: '0.3s'}}>
          {/* Decorative background shapes removed for minimal look */}
          <div className="relative z-10 flex flex-col md:flex-row items-center justify-between max-w-5xl mx-auto px-0 gap-4 pb-0">
            <div className="flex flex-col items-center md:items-start gap-3 mb-4 md:mb-0">
              <div className="flex items-center gap-2">
                <span className="bg-gradient-to-tr from-[#FF4500] via-[#FF6B35] to-[#FF4500] h-8 w-8 rounded-xl flex items-center justify-center text-xl font-extrabold shadow-[0_2px_8px_rgba(255,69,0,0.15)] mr-1"></span>
                <span className="font-extrabold text-lg tracking-tight text-slate-900" style={{fontFamily: 'Plus Jakarta Sans'}}>RedditMVP</span>
              </div>
              <p className="text-xs text-slate-500 max-w-xs text-center md:text-left">Elevate your Reddit community with AI-powered tools and analytics</p>
            </div>
            <div className="flex flex-col gap-6 md:flex-row md:items-start">
              <div className="flex flex-col items-center md:items-start gap-3">
                <h3 className="font-bold text-slate-800 text-sm">Quick Links</h3>
                <nav className="flex flex-wrap md:flex-col items-center md:items-start justify-center gap-3 text-sm font-medium text-slate-600">
                  <Link href="/" className="hover:text-[#FF4500] transition-colors">Home</Link>
                  <a href="#how-it-works" className="hover:text-[#FF4500] transition-colors">How It Works</a>
                  <a href="#faq" className="hover:text-[#FF4500] transition-colors">FAQ</a>
                </nav>
              </div>
              <div className="flex flex-col items-center md:items-start gap-3">
                <h3 className="font-bold text-slate-800 text-sm">Account</h3>
                <nav className="flex flex-wrap md:flex-col items-center md:items-start justify-center gap-3 text-sm font-medium text-slate-600">
                  <a href="/login" className="hover:text-[#FF4500] transition-colors">Login</a>
                  <a href="/register" className="hover:text-[#FF4500] transition-colors">Register</a>
                  <a href="/ai" className="hover:text-[#FF4500] transition-colors">AI Playground</a>
                </nav>
              </div>
              <div className="flex flex-col items-center md:items-start gap-3">
                <h3 className="font-bold text-slate-800 text-sm">Connect</h3>
                <div className="flex items-center gap-4">
                  <a href="#" className="text-slate-600 hover:text-[#FF4500] transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
                    </svg>
                  </a>
                  <a href="#" className="text-slate-600 hover:text-[#FF4500] transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/>
                    </svg>
                  </a>
                  <a href="#" className="text-slate-600 hover:text-[#FF4500] transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm-2 16h-2v-6h2v6zm-1-6.891c-.607 0-1.1-.496-1.1-1.109 0-.612.492-1.109 1.1-1.109s1.1.497 1.1 1.109c0 .613-.493 1.109-1.1 1.109zm8 6.891h-1.998v-2.861c0-1.881-2.002-1.722-2.002 0v2.861h-2v-6h2v1.093c.872-1.616 4-1.736 4 1.548v3.359z"/>
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
          <div className="relative z-10 border-t border-slate-200/50 py-6">
            <div className="text-slate-500 text-xs">&copy; {new Date().getFullYear()} RedditMVP. All rights reserved.</div>
          </div>
        </footer>
      </section>
    </main>
  );
}

function AIPlayground() {
  const [topic, setTopic] = React.useState("");
  const [result, setResult] = React.useState("");
  const [loading, setLoading] = React.useState(false);

  function handleGenerate(e: React.FormEvent) {
    e.preventDefault();
    if (!topic.trim()) return;
    setLoading(true);
    setResult("");
    setTimeout(() => {
      setResult(
        `Here’s a sample post for "${topic}":\n\nHey everyone! Let’s talk about ${topic}. What are your thoughts, tips, or experiences? Share below!`
      );
      setLoading(false);
    }, 900);
  }

  return (
    <form
      onSubmit={handleGenerate}
      className="flex flex-col items-center w-full max-w-xl mx-auto"
    >
      <div className="flex w-full bg-white border border-slate-200 rounded-2xl px-6 py-4 shadow-sm">
        <input
          type="text"
          className="flex-1 bg-transparent outline-none text-slate-900 font-medium text-lg px-2 placeholder:text-slate-400"
          placeholder="Enter a topic (e.g. productivity, memes, travel)"
          value={topic}
          onChange={e => setTopic(e.target.value)}
          style={{fontFamily: 'Plus Jakarta Sans'}}
        />
        <button
          type="submit"
          className="ml-4 px-6 py-2 rounded-xl font-bold bg-slate-800 text-white hover:bg-slate-900 transition-all bento-btn"
          disabled={loading || !topic.trim()}
        >
          {loading ? "Generating..." : "Generate"}
        </button>
      </div>
      {result && (
        <div className="mt-8 w-full bg-gradient-to-br from-[#FFF7F0] to-white border border-slate-100 rounded-2xl p-6 text-slate-800 shadow-sm animate-fade-slide whitespace-pre-line">
          {result}
        </div>
      )}
    </form>
  );
}

function HeroBlobSVG() {
  return (
    <svg viewBox="0 0 1440 600" fill="none" xmlns="http://www.w3.org/2000/svg" className="w-full h-full">
      <defs>
        <linearGradient id="hero-gradient" x1="0" y1="0" x2="1" y2="1">
          <stop offset="0%" stopColor="#FF6B35" stopOpacity="0.08" />
          <stop offset="100%" stopColor="#23272f" stopOpacity="0.04" />
        </linearGradient>
      </defs>
      <ellipse cx="720" cy="300" rx="700" ry="220" fill="url(#hero-gradient)" />
      <ellipse cx="400" cy="100" rx="200" ry="80" fill="#FF4500" fillOpacity="0.04" />
      <ellipse cx="1200" cy="500" rx="180" ry="60" fill="#FF6B35" fillOpacity="0.06" />
    </svg>
  );
}

function DownArrowSVG() {
  return (
    <svg width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg" className="text-slate-400">
      <circle cx="18" cy="18" r="18" fill="#fff" fillOpacity="0.7" />
      <path d="M12 16l6 6 6-6" stroke="#FF6B35" strokeWidth="2.5" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
}
</file>

</files>
